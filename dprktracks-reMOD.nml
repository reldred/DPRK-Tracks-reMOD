//North Korean Track Set
//Defines the GRF
grf {
 grfid: "RJE\1A";
 name: string(STR_GRF_NAME);
 desc: string(STR_GRF_DESC);
 version: 13;
 min_compatible_version: 1;
 param {
  PARAM_CC {
   type: bool;
   name: string(STR_PARAM_CC);
   desc: string(STR_PARAM_CC_DESC);
   def_value: 0;
  }
 }
 param {
  PARAM_CONST {
   type: int;
   name: string(STR_MSC);
   desc: string(STR_CON_DESC);
   min_value: 0;
   max_value: 4;
   def_value: 2;
   names: {
    0: string(STR_MC_0);
    1: string(STR_MC_1);
    2: string(STR_MC_2);
    3: string(STR_MC_3);
    4: string(STR_MC_4);
   };
  }
 }
 param {
  PARAM_MAINT {
   type: int;
   name: string(STR_MSM);
   desc: string(STR_MAINT_DESC);
   min_value: 0;
   max_value: 4;
   def_value: 2;
   names: {
    0: string(STR_MC_0);
    1: string(STR_MC_1);
    2: string(STR_MC_2);
    3: string(STR_MC_3);
    4: string(STR_MC_4);
   };
  }
 }
 param {
  PARAM_SIGNAL {
   type: int;
   name: string(STR_PARAM_SIGNAL);
   desc: string(STR_PARAM_SIGNAL_DESC);
   min_value: 0;
   max_value: 2;
   def_value: 1;
   names: {
    0: string(STR_SIGNAL_0);
    1: string(STR_SIGNAL_1);
    2: string(STR_SIGNAL_2);
   };
  }
 }
 param {
  PARAM_METRO {
   type: int;
   name: string(STR_PARAM_METRO);
   desc: string(STR_PARAM_METRO_DESC);
   min_value: 0;
   max_value: 4;
   def_value: 0;
   names: {
    0: string(STR_PARAM_METRO1);
    1: string(STR_PARAM_METRO2);
    2: string(STR_PARAM_METRO3);
    3: string(STR_PARAM_METRO4);
    4: string(STR_PARAM_METRO5);
   };
  }
 }
 param {
  PARAM_NARROW {
   type: int;
   name: string(STR_PARAM_NARROW);
   desc: string(STR_PARAM_NARROW_DESC);
   min_value: 0;
   max_value: 2;
   def_value: 0;
   names: {
    0: string(STR_PARAM_NARROW1);
    1: string(STR_PARAM_NARROW2);
    2: string(STR_PARAM_NARROW3);
   };
  }
 }
 param {
  PARAM_DUAL {
   type: bool;
   name: string(STR_PARAM_DUAL);
   desc: string(STR_PARAM_DUAL_DESC);
   def_value: 1;
  }
 }
 param {
  PARAM_URBAN {
   type: bool;
   name: string(STR_PARAM_URBAN);
   desc: string(STR_PARAM_URBAN_DESC);
   def_value: 1;
  }
 }
 param {
  PARAM_INTRO {
   type: int;
   name: string(STR_PARAM_INTRO);
   desc: string(STR_PARAM_INTRO_DESC);
   min_value: 0;
   max_value: 2;
   def_value: 0;
   names: {
    0: string(STR_PARAM_INTRO1);
    1: string(STR_PARAM_INTRO2);
    2: string(STR_PARAM_INTRO3);
   };
  }
 }
 param {
  PARAM_SPEED {
   type: int;
   name: string(STR_PARAM_SPEED);
   desc: string(STR_PARAM_SPEED_DESC);
   min_value: 0;
   max_value: 2;
   def_value: 0;
   names: {
    0: string(STR_PARAM_SPEED1);
    1: string(STR_PARAM_SPEED2);
    2: string(STR_PARAM_SPEED3);
   };
  }
 }
 param {
  PARAM_UTUNNEL {
   type: int;
   name: string(STR_UTUNNEL);
   desc: string(STR_UTUNNEL_DESC);
   min_value: 0;
   max_value: 1;
   def_value: 1;
   names: {
    0: string(STR_UTUNNEL_1);
    1: string(STR_UTUNNEL_2);
   };
  }
 }
 param {
  PARAM_DEPOT {
   type: bool;
   name: string(STR_PARAM_DEPOT);
   desc: string(STR_PARAM_DEPOT_DESC);
   def_value: 0;
  }
 }
 param {
  PARAM_BRIDGE {
   type: int;
   name: string(STR_PARAM_BRIDGE);
   desc: string(STR_PARAM_BRIDGE_DESC);
   min_value: 0;
   max_value: 2;
   def_value: 0;
   names: {
    0: string(STR_BRIDGE_1);
    1: string(STR_BRIDGE_2);
    2: string(STR_BRIDGE_3);
   };
  }
 }
 param {
  PARAM_FENCE {
   type: bool;
   name: string(STR_PARAM_FENCE);
   desc: string(STR_PARAM_FENCE_DESC);
   def_value: 0;
  }
 }
 param {
  PARAM_URBANJP {
   type: int;
   name: string(STR_PARAM_URBANJP);
   desc: string(STR_PARAM_URBANJP_DESC);
   min_value: 0;
   max_value: 1;
   def_value: 0;
   names: {
    0: string(STR_PARAM_URBANJP_0);
    1: string(STR_PARAM_URBANJP_1);
    };
 }
 }
}
//Defines how the sprites are tracked, courtesy of the swedish rail set.
/* $Id$ */
/*

 * This file is part of the Swedish RailSet.

 * Swedish RailSet is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.

 * Swedish RailSet is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with Swedish RailSet. If not, see <http://www.gnu.org/licenses/>.

 */
// Default ground tile template (re-use as needed)
template ground_tile(x, y) { [x, y, 64, 31, -31, 0, 9] }
// track_type underlays
template tmpl_underlay_straight() {
 [ 75, 0, 64,31, -31, 0]
 [ 0, 0, 64,31, -31, 0]
}
template tmpl_underlay_slope() {
 [ 75, 40, 64,39, -31, -8]
 [150, 40, 64,23, -31, 0]
 [225, 40, 64,23, -31, 0]
 [300, 40, 64,39, -30, -9]
}
template tmpl_underlay_slope_U() {
 [ 75, 40, 64,39, -31, -8]
 [150, 40, 64,23, -31, 0]
 [225, 40, 64,23, -31, 0]
 [300, 40, 64,39, -32, -8]
}
template tmpl_underlay_diagonal() {
 [150, 0, 64,31, -31, 0]
 [225, 0, 64,31, -31, 0]
 [ 0, 40, 64,31, -31, 0]
 [300, 0, 64,31, -31, 0]
}
template tmpl_underlay_track_types() {
 tmpl_underlay_straight()
 tmpl_underlay_diagonal()
 tmpl_underlay_slope()
 // x - crossing
 [ 0,120, 64,31, -31, 0]
 // underlay for crossings w/o tracks
 [ 0, 80, 64,31, -31, 0]
 [225, 80, 64,31, -31, 0]
 [150, 80, 64,31, -31, 0]
 [ 75, 80, 64,31, -31, 0]
 [300, 80, 64,31, -31, 0]
}
template tmpl_underlay_track_types_U() {//Urban
 tmpl_underlay_straight()
 tmpl_underlay_diagonal()
 tmpl_underlay_slope_U()
 // x - crossing
 [ 0,120, 64,31, -31, 0]
 // underlay for crossings w/o tracks
 [ 0, 80, 64,31, -31, 0]
 [225, 80, 64,31, -31, 0]
 [150, 80, 64,31, -31, 0]
 [ 75, 80, 64,31, -31, 0]
 [300, 80, 64,31, -31, 0]
}
template tmpl_overlay_straight_EDS() {
 [ 0,155, 42,23, -19-2, 5-1]
 [ 50,155, 42,23, -19, 5-1]
}
template tmpl_overlay_slopes_EDS() {
 [ 0,195, 64,39, -31, -8]
 [ 75,195, 64,23, -31, 0]
 [150,195, 64,23, -31, 0]
 [225,195, 64,39, -32, -9]
}
template tmpl_overlay_diagonal_EDS() {
 [97,155, 46, 8, -19-3, 4-1]
 [150,155, 48, 8, -19-4, 20-1]
 [200,155, 12,21, 11, 6-1]
 [250,155, 12,21, -21, 6-1]
}
// track_type overlays_EDS
template tmpl_overlay_track_types_EDS() {
    tmpl_overlay_straight_EDS()
    tmpl_overlay_diagonal_EDS()
    tmpl_overlay_slopes_EDS()
}
template tmpl_overlay_straight() {
 [ 0,155, 40,23, -19, 5]
 [ 50,155, 40,23, -19, 5]
}
template tmpl_overlay_slopes() {
 [ 0,195, 64,39, -31, -8]
 [ 75,195, 64,23, -31, 0]
 [150,195, 64,23, -31, 0]
 [225,195, 64,39, -32, -9]
}
template tmpl_overlay_diagonal() {
 [100,155, 40, 7, -19, 4]
 [150,155, 40, 7, -19, 20]
 [200,155, 12,19, 11, 6]
 [250,155, 12,19, -21, 6]
}
// track_type overlays
template tmpl_overlay_track_types() {
    tmpl_overlay_straight()
    tmpl_overlay_diagonal()
    tmpl_overlay_slopes()
}
template tmpl_bridges_underlay() {
 tmpl_underlay_straight()
 tmpl_underlay_slope()
 tmpl_underlay_diagonal()
}
// bridge surface overlays
template tmpl_bridges_overlay() {
//    tmpl_overlay_straight()
//    tmpl_overlay_slopes()
//    tmpl_overlay_diagonal()
 tmpl_bridges_underlay()
}
// track_type tunnel tracks
template tmpl_tunnel_tracks() {
 [ 75, 0, 64,31, -31, 0]
 [ 0, 0, 64,31, -31, 0]
 [ 75, 0, 64,31, -31, 0]
 [ 0, 0, 64,31, -31, 0]
}
// track_type level crossings
template tmpl_level_crossing_track_types_empty() {
 [ 0,155, 40,21, -20, 5]
 [ 50,155, 40,21, -20, 5]
 [ 0,240, 10,10, 0, 0]
 [ 0,240, 10,10, 0, 0]
 [ 0,240, 10,10, 0, 0]
 [ 0,240, 10,10, 0, 0]
 [ 0,240, 10,10, 0, 0]
 [ 0,240, 10,10, 0, 0]
 [ 0,240, 10,10, 0, 0]
 [ 0,240, 10,10, 0, 0]
}
template tmpl_rails_crossing(x,y) {
 [ x, y, 45,23, -21, 4]
 [x+49, y, 45,23, -22, 4]
}
template tmpl_level_crossing_track_types_open(y) {
    tmpl_rails_crossing(0, 0)
 [ 0, 0, 1,1, 0, 0]
 [ 0, y, 5,23, -5, -16]
 [20, y, 5,23, -6, -21]
 [ 0, 0, 1,1, 0, 0]
 [40, y, 5,23, 3, -18]
 [ 0, 0, 1,1, 0, 0]
 [ 0, 0, 1,1, 0, 0]
 [60, y, 5,23, 1, -22]
}
template tmpl_level_crossing_track_types_closed(y) {
    tmpl_rails_crossing(0, 0)
 [ 0, 0, 1,1, 0, 0]
 [ 0, y, 19,19, -5, -7]
 [20, y, 19,19, -20, -12]
 [ 0, 0, 1,1, 0, 0]
 [40, y, 19,19, 3, -7]
 [ 0, 0, 1,1, 0, 0]
 [ 0, 0, 1,1, 0, 0]
 [60, y, 19,19, -13, -11]
}
// fences
template tmpl_fences(y) {
//fence drawing on diagonals is and has always been broken, the fences on both sides really need to be moved apart 4 px horizontally and 2 px vertically (1 "TTD unit", see also:
//	- https://www.tt-forums.net/viewtopic.php?f=26&t=61584
//	- https://bugs.openttd.org/task/5309
// need to move both sides half of that to compensate, or (todo) write a patch
// commented offsets are perfect for the front fence on diagonals
//	[  0,  y, 33,22, -30,  -6]
 [ 0, y, 33,22, -32, -7]
//	[ 48,  y, 33,22,  -2,  -6]
 [ 48, y, 33,22, 0, -7]
 [ 93, y, 8,32, -3, -19] // verticals are OK as-is
 [112, y, 65, 9, -32, -10] // same for horizontals
//	[192,  y, 33,15, -29,  -7]
 [192, y, 33,15, -31, -8]
//	[240,  y, 33,15,  -1,  -7]
 [240, y, 33,15, 1, -8]
//	[288,  y, 33,30, -30, -14]
 [288, y, 33,30, -32, -15]
//	[350,  y, 33,30,  -2, -14]
 [350, y, 33,30, 0, -15]
}
// gui
template tmpl_gui() {
 [ 0, 0, 20, 20, 0, 0]
 [ 25, 0, 20, 20, 0, 0]
 [ 50, 0, 20, 20, 0, 0]
 [ 75, 0, 20, 20, 0, 0]
 [100, 0, 20, 20, 0, 0]
 [125, 0, 20, 20, 0, 0]
 [150, 0, 20, 20, 0, 0]
 [175, 0, 20, 20, 0, 0]
 [200, 0, 32, 32, 0, 0]
 [250, 0, 32, 32, 0, 0]
 [300, 0, 32, 32, 0, 0]
 [350, 0, 32, 32, 0, 0]
 [400, 0, 32, 32, 0, 0]
 [450, 0, 32, 32, 0, 0]
 [500, 0, 32, 32, 0, 0]
 [550, 0, 32, 32, 0, 0]
}
template tmpl_tunnel_overlaytracks(y) {
 [ 0, y, 64, 39, -7-24, -8]
 [65, y, 64, 39, -9-7-13-2, -3-14+1]
 [130, y, 64, 39, -26-7+2, -3-14+1]
 [195, y, 64, 39, -19-12, -8]
}
 template tmpl_tunnel_overlays(y) {
 [ 0, y, 64, 39, -7-24, -38]
 [65, y, 64, 39, -9-7-13-2, -33-14+1]
 [130, y, 64, 39, -26-7+2, -33-14+1]
 [195, y, 64, 39, -19-12, -38]
}
template tmpl_no_fences() {
 [ 0, 0, 1, 1, 0, 0]
 [ 0, 0, 1, 1, 0, 0]
 [ 0, 0, 1, 1, 0, 0]
 [ 0, 0, 1, 1, 0, 0]
 [ 0, 0, 1, 1, 0, 0]
 [ 0, 0, 1, 1, 0, 0]
 [ 0, 0, 1, 1, 0, 0]
 [ 0, 0, 1, 1, 0, 0]
}
template tmpl_depot(x) {
 [65, 96+2*x, 64,47+x, -9-22, -31+11-x]
 [65, 0, 64,47+x, -9, -31-x]
 [ 0, 96+2*x, 64,47+x, -53+22, -31+11-x]
 [ 0, 0, 64,47+x, -53, -31-x]
 [ 0, 48+x, 64,47+x, -53, -31-x]
 [65, 48+x, 64,47+x, -9, -31-x]
}
// Catenary stuff from Auztracks
/**********************************************

//Catenarypylons

 **********************************************/
//Catenarypylons
template template_catenarydoublepylons() {
    //[left_x, upper_y, width, height, offset_x, offset_y]
 [ 4, 28, 14, 32, -11, -30]
 [ 20, 17, 40, 43, 1, -41]
 [ 62, 28, 14, 32, -1, -30]
 [ 78, 17, 40, 43, -39, -41]
 [ 120, 28, 14, 32, -6, -31]
 [ 136, 16, 14, 44, -6, -42]
 [ 152, 28, 28, 32, 0, -31]
 [ 181, 28, 27, 32, -26, -31]
}
/**********************************************

//Catenarywires

 **********************************************/
template template_catenarywires() {
    //[left_x, upper_y, width, height, offset_x, offset_y]
 [ 10, 100, 64, 42, -45, -20]
 [ 100, 100, 64, 42, -17, -20]
 [ 200, 100, 32, 11, 0, -12] //-1
 [ 300, 100, 1, 21, 0, -8] //0
 [ 10, 200, 64, 50, -45, -21]
 [ 100, 200, 64, 34, -17, -10]
 [ 200, 200, 64, 34, -45, -10]
 [ 300, 200, 64, 50, -17, -21]
 [ 10, 300, 64, 42, -45, -20]
 [ 100, 300, 64, 42, -17, -20]
 [ 200, 300, 32, 11, 0, -12]
 [ 300, 300, 1, 21, 0, -8] //0
 [ 10, 400, 64, 50, -45, -21]
 [ 100, 400, 64, 34, -17, -10]
 [ 200, 400, 64, 34, -45, -10]
 [ 300, 400, 64, 50, -17, -21]
 [ 10, 500, 64, 42, -45, -20]
 [ 100, 500, 64, 42, -17, -20]
 [ 200, 500, 32, 11, 0, -12]
 [ 300, 500, 1, 21, 0, -8] //0
 [ 10, 600, 64, 50, -45, -21]
 [ 100, 600, 64, 34, -17, -10]
 [ 200, 600, 64, 34, -45, -10]
 [ 300, 600, 64, 50, -17, -21]
 [ 10, 700, 64, 42, -45, -20]
 [ 100, 700, 64, 42, -17, -20]
 [ 200, 700, 64, 42, -45, -20]
 [ 300, 700, 64, 42, -17, -20]
}
// Catenary stuff from Auztracks
/**********************************************

//Catenarypylons

 **********************************************/
template template_nopylons() {
    //[left_x, upper_y, width, height, offset_x, offset_y]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
}
template template_metroroof() {
    //[left_x, upper_y, width, height, offset_x, offset_y]
 //Single tile
 [0, 0, 64, 31+8, -32-16+3, -20+15]
 [65, 48, 64, 31+8, -32+16-1, -20+15]
 [130, 32+8, 64, 31, -32+16-1, -20+15]
 [0, 32+8, 64, 31, -32-16+1, -20+15-1]
 //Single tile sloped
 [65, 0, 64, 39+8, -32-13, -20+14]
 [130, 0, 64, 23+8, -32+15, -20+24]
 [195, 0, 64, 23+8, -32-13, -20+24]
 [260, 0, 64, 39+8, -32+15, -20+14]
 //Multitile
 [0, 0, 64, 31+8, -32-16+3, -20+15]
 [65, 48, 64, 31+8, -32+16-1, -20+15]
 [130, 32+8, 64, 31, -32+16-1, -20+15]
 [0, 32+8, 64, 31, -32-16+1, -20+15-1]
 //Multitile
 [65, 0, 64, 39+8, -32-13, -20+14]
 [130, 0, 64, 23+8, -32+15, -20+24]
 [195, 0, 64, 23+8, -32-13, -20+24]
 [260, 0, 64, 39+8, -32+15, -20+14]
 //Multitile
 [0, 0, 64, 31+8, -32-16+3, -20+15]
 [65, 48, 64, 31+8, -32+16-1, -20+15]
 [130, 32+8, 64, 31, -32+16-1, -20+15]
 [0, 32+8, 64, 31, -32-16+1, -20+15-1]
 //Multitile
 [65, 0, 64, 39+8, -32-13, -20+14]
 [130, 0, 64, 23+8, -32+15, -20+24]
 [195, 0, 64, 23+8, -32-13, -20+24]
 [260, 0, 64, 39+8, -32+15, -20+14]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
}
//----------------- Standard gauge
//Unelectrified
//Electrified
//3rd Rail
//----------------- Narrow gauge
//Unelectrified
//Electrified
//------------------- Dual gauge
//Unelectrified
//Electrified
//Compatibility	
spriteset (SPRITESET_NO_fences, "grf/Fences.png") { tmpl_no_fences()}switch(FEAT_RAILTYPES, SELF, NO_fences, PARAM_FENCE) { 0: SPRITESET_NO_fences; CB_FAILED;}
template tmpl_signals(y) {
 [0, y, 9,23, -5, -21]
 [10, y, 9,23, -1, -22]
 [20, y, 9,23, 0, -20]
 [30, y, 9,23, 0, -20]
 [40, y, 9,23, -3, -21]
 [50, y, 9,23, -3, -21]
 [60, y, 9,23, -3, -20]
 [70, y, 9,23, -3, -20]
}
template tmpl_semaphore(y) {
 [0, y, 9,23, -7, -21]
 [10, y, 9,23, 1, -22]
 [20, y, 9,23, 2, -20]
 [30, y, 9,23, -2, -20]
 [40, y, 9,23, -3, -21]
 [50, y, 9,23, -3, -21]
 [60, y, 10,23, -5, -20]
 [71, y, 10,23, -1, -20]
}
//Light signals
spriteset (signal_block_red, "grf/Signals.png") {
 tmpl_signals(0+48)
}
spriteset (signal_block_green, "grf/Signals.png") {
 tmpl_signals(24+48)
}
spriteset (signal_entry_red, "grf/Signals.png") {
 tmpl_signals(0+48*2)
}
spriteset (signal_entry_green, "grf/Signals.png") {
 tmpl_signals(24+48*2)
}
spriteset (signal_exit_red, "grf/Signals.png") {
 tmpl_signals(0+48*3)
}
spriteset (signal_exit_green, "grf/Signals.png") {
 tmpl_signals(24+48*3)
}
spriteset (signal_combo_red, "grf/Signals.png") {
 tmpl_signals(0+48*4)
}
spriteset (signal_combo_green, "grf/Signals.png") {
 tmpl_signals(24+48*4)
}
spriteset (signal_path_red, "grf/Signals.png") {
 tmpl_signals(0+48*5)
}
spriteset (signal_path_green, "grf/Signals.png") {
 tmpl_signals(24+48*5)
}
spriteset (signal_oneway_red, "grf/Signals.png") {
 tmpl_signals(0+48*6)
}
spriteset (signal_oneway_green, "grf/Signals.png") {
 tmpl_signals(24+48*6)
}
//Semaphores
spriteset (semaphore_block_red, "grf/Semaphores.png") {
 tmpl_semaphore(0+48)
}
spriteset (semaphore_block_green, "grf/Semaphores.png") {
 tmpl_semaphore(24+48)
}
spriteset (semaphore_entry_red, "grf/Semaphores.png") {
 tmpl_semaphore(0+48*2)
}
spriteset (semaphore_entry_green, "grf/Semaphores.png") {
 tmpl_semaphore(24+48*2)
}
spriteset (semaphore_exit_red, "grf/Semaphores.png") {
 tmpl_semaphore(0+48*3)
}
spriteset (semaphore_exit_green, "grf/Semaphores.png") {
 tmpl_semaphore(24+48*3)
}
spriteset (semaphore_combo_red, "grf/Semaphores.png") {
 tmpl_semaphore(0+48*4)
}
spriteset (semaphore_combo_green, "grf/Semaphores.png") {
 tmpl_semaphore(24+48*4)
}
spriteset (semaphore_path_red, "grf/Semaphores.png") {
 tmpl_semaphore(0+48*5)
}
spriteset (semaphore_path_green, "grf/Semaphores.png") {
 tmpl_semaphore(24+48*5)
}
spriteset (semaphore_oneway_red, "grf/Semaphores.png") {
 tmpl_semaphore(0+48*6)
}
spriteset (semaphore_oneway_green, "grf/Semaphores.png") {
 tmpl_semaphore(24+48*6)
}
//Light signals
switch(FEAT_RAILTYPES, SELF, sw_new_signals_block_light, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: signal_block_red; //red light
 01: signal_block_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_entry_light, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: signal_entry_red; //red light
 01: signal_entry_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_exit_light, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: signal_exit_red; //red light
 01: signal_exit_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_combo_light, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: signal_combo_red; //red light
 01: signal_combo_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_path_light, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: signal_path_red; //red light
 01: signal_path_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_oneway_light, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: signal_oneway_red; //red light
 01: signal_oneway_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_light, getbits(extra_callback_info2, 16, 8)) { //checks signal type
 00: sw_new_signals_block_light; //block signal
 01: sw_new_signals_entry_light; //entry signal
 02: sw_new_signals_exit_light; //exit signal
 03: sw_new_signals_combo_light; //combo signal
 04: sw_new_signals_path_light; //path signal
 05: sw_new_signals_oneway_light; //oneway signal
}
//Semaphores
switch(FEAT_RAILTYPES, SELF, sw_new_signals_block_semaph, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: semaphore_block_red; //red light
 01: semaphore_block_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_entry_semaph, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: semaphore_entry_red; //red light
 01: semaphore_entry_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_exit_semaph, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: semaphore_exit_red; //red light
 01: semaphore_exit_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_combo_semaph, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: semaphore_combo_red; //red light
 01: semaphore_combo_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_path_semaph, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: semaphore_path_red; //red light
 01: semaphore_path_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_oneway_semaph, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: semaphore_oneway_red; //red light
 01: semaphore_oneway_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_semaph, getbits(extra_callback_info2, 16, 8)) { //checks signal type
 00: sw_new_signals_block_semaph; //block signal
 01: sw_new_signals_entry_semaph; //entry signal
 02: sw_new_signals_exit_semaph; //exit signal
 03: sw_new_signals_combo_semaph; //combo signal
 04: sw_new_signals_path_semaph; //path signal
 05: sw_new_signals_oneway_semaph; //oneway signal
}
//snow
//Light signals
spriteset (signal_snow_block_red, "grf/Signals_SNOW.png") {
 tmpl_signals(0+48)
}
spriteset (signal_snow_block_green, "grf/Signals_SNOW.png") {
 tmpl_signals(24+48)
}
spriteset (signal_snow_entry_red, "grf/Signals_SNOW.png") {
 tmpl_signals(0+48*2)
}
spriteset (signal_snow_entry_green, "grf/Signals_SNOW.png") {
 tmpl_signals(24+48*2)
}
spriteset (signal_snow_exit_red, "grf/Signals_SNOW.png") {
 tmpl_signals(0+48*3)
}
spriteset (signal_snow_exit_green, "grf/Signals_SNOW.png") {
 tmpl_signals(24+48*3)
}
spriteset (signal_snow_combo_red, "grf/Signals_SNOW.png") {
 tmpl_signals(0+48*4)
}
spriteset (signal_snow_combo_green, "grf/Signals_SNOW.png") {
 tmpl_signals(24+48*4)
}
spriteset (signal_snow_path_red, "grf/Signals_SNOW.png") {
 tmpl_signals(0+48*5)
}
spriteset (signal_snow_path_green, "grf/Signals_SNOW.png") {
 tmpl_signals(24+48*5)
}
spriteset (signal_snow_oneway_red, "grf/Signals_SNOW.png") {
 tmpl_signals(0+48*6)
}
spriteset (signal_snow_oneway_green, "grf/Signals_SNOW.png") {
 tmpl_signals(24+48*6)
}
//Semaphores
spriteset (semaphore_snow_block_red, "grf/Semaphores_SNOW.png") {
 tmpl_semaphore(0+48)
}
spriteset (semaphore_snow_block_green, "grf/Semaphores_SNOW.png") {
 tmpl_semaphore(24+48)
}
spriteset (semaphore_snow_entry_red, "grf/Semaphores_SNOW.png") {
 tmpl_semaphore(0+48*2)
}
spriteset (semaphore_snow_entry_green, "grf/Semaphores_SNOW.png") {
 tmpl_semaphore(24+48*2)
}
spriteset (semaphore_snow_exit_red, "grf/Semaphores_SNOW.png") {
 tmpl_semaphore(0+48*3)
}
spriteset (semaphore_snow_exit_green, "grf/Semaphores_SNOW.png") {
 tmpl_semaphore(24+48*3)
}
spriteset (semaphore_snow_combo_red, "grf/Semaphores_SNOW.png") {
 tmpl_semaphore(0+48*4)
}
spriteset (semaphore_snow_combo_green, "grf/Semaphores_SNOW.png") {
 tmpl_semaphore(24+48*4)
}
spriteset (semaphore_snow_path_red, "grf/Semaphores_SNOW.png") {
 tmpl_semaphore(0+48*5)
}
spriteset (semaphore_snow_path_green, "grf/Semaphores_SNOW.png") {
 tmpl_semaphore(24+48*5)
}
spriteset (semaphore_snow_oneway_red, "grf/Semaphores_SNOW.png") {
 tmpl_semaphore(0+48*6)
}
spriteset (semaphore_snow_oneway_green, "grf/Semaphores_SNOW.png") {
 tmpl_semaphore(24+48*6)
}
//Light signals
switch(FEAT_RAILTYPES, SELF, sw_new_signals_snow_block_light, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: signal_snow_block_red; //red light
 01: signal_snow_block_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_snow_entry_light, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: signal_snow_entry_red; //red light
 01: signal_snow_entry_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_snow_exit_light, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: signal_snow_exit_red; //red light
 01: signal_snow_exit_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_snow_combo_light, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: signal_snow_combo_red; //red light
 01: signal_snow_combo_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_snow_path_light, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: signal_snow_path_red; //red light
 01: signal_snow_path_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_snow_oneway_light, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: signal_snow_oneway_red; //red light
 01: signal_snow_oneway_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_snow_light, getbits(extra_callback_info2, 16, 8)) { //checks signal type
 00: sw_new_signals_snow_block_light; //block signal
 01: sw_new_signals_snow_entry_light; //entry signal
 02: sw_new_signals_snow_exit_light; //exit signal
 03: sw_new_signals_snow_combo_light; //combo signal
 04: sw_new_signals_snow_path_light; //path signal
 05: sw_new_signals_snow_oneway_light; //oneway signal
}
//Semaphores
switch(FEAT_RAILTYPES, SELF, sw_new_signals_snow_block_semaph, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: semaphore_snow_block_red; //red light
 01: semaphore_snow_block_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_snow_entry_semaph, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: semaphore_snow_entry_red; //red light
 01: semaphore_snow_entry_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_snow_exit_semaph, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: semaphore_snow_exit_red; //red light
 01: semaphore_snow_exit_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_snow_combo_semaph, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: semaphore_snow_combo_red; //red light
 01: semaphore_snow_combo_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_snow_path_semaph, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: semaphore_snow_path_red; //red light
 01: semaphore_snow_path_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_snow_oneway_semaph, getbits(extra_callback_info2, 0, 8)) { //checks light
 00: semaphore_snow_oneway_red; //red light
 01: semaphore_snow_oneway_green;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_snow_semaph, getbits(extra_callback_info2, 16, 8)) { //checks signal type
 00: sw_new_signals_snow_block_semaph; //block signal
 01: sw_new_signals_snow_entry_semaph; //entry signal
 02: sw_new_signals_snow_exit_semaph; //exit signal
 03: sw_new_signals_snow_combo_semaph; //combo signal
 04: sw_new_signals_snow_path_semaph; //path signal
 05: sw_new_signals_snow_oneway_semaph; //oneway signal
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_a, getbits(extra_callback_info2, 8, 8)) { //checks signal variant
 00: sw_new_signals_light; //light
 01: sw_new_signals_semaph; //semaphore
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_snow_a, getbits(extra_callback_info2, 8, 8)) { //checks signal variant
 00: sw_new_signals_snow_light; //light
 01: sw_new_signals_snow_semaph; //semaphore
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals_snow, terrain_type) {
 TILETYPE_SNOW: sw_new_signals_snow_a;
 sw_new_signals_a;
}
switch(FEAT_RAILTYPES, SELF, sw_new_signals, PARAM_SIGNAL) {
 1..2: sw_new_signals_snow;
 CB_FAILED;
}
template tmpl_base_signals(y) {
 [0, y, 9,23, -5, -21]
 [0, y+24, 9,23, -5, -21]
 [10, y, 9,23, -1, -22]
 [10, y+24, 9,23, -1, -22]
 [20, y, 9,23, 0, -20]
 [20, y+24, 9,23, 0, -20]
 [30, y, 9,23, 0, -20]
 [30, y+24, 9,23, 0, -20]
 [40, y, 9,23, -3, -21]
 [40, y+24, 9,23, -3, -21]
 [50, y, 9,23, -3, -21]
 [50, y+24, 9,23, -3, -21]
 [60, y, 9,23, -3, -20]
 [60, y+24, 9,23, -3, -20]
 [70, y, 9,23, -3, -20]
 [70, y+24, 9,23, -3, -20]
}
template tmpl_base_semaphore(y) {
 [0, y, 9,23, -7, -21, "grf/Semaphores.png"]
 [0, y+24, 9,23, -7, -21, "grf/Semaphores.png"]
 [10, y, 9,23, 1, -22, "grf/Semaphores.png"]
 [10, y+24, 9,23, 1, -22, "grf/Semaphores.png"]
 [20, y, 9,23, 2, -20, "grf/Semaphores.png"]
 [20, y+24, 9,23, 2, -20, "grf/Semaphores.png"]
 [30, y, 9,23, -2, -20, "grf/Semaphores.png"]
 [30, y+24, 9,23, -2, -20, "grf/Semaphores.png"]
 [40, y, 9,23, -3, -21, "grf/Semaphores.png"]
 [40, y+24, 9,23, -3, -21, "grf/Semaphores.png"]
 [50, y, 9,23, -3, -21, "grf/Semaphores.png"]
 [50, y+24, 9,23, -3, -21, "grf/Semaphores.png"]
 [60, y, 10,23, -5, -20, "grf/Semaphores.png"]
 [60, y+24, 10,23, -5, -20, "grf/Semaphores.png"]
 [71, y, 10,23, -1, -20, "grf/Semaphores.png"]
 [71, y+24, 10,23, -1, -20, "grf/Semaphores.png"]
}
//Replace the base sprites
if(PARAM_SIGNAL == 1){
 replace(1275, "grf/Signals.png") {
  tmpl_base_signals(48)
 }/*

	replacenew(PRE_SIGNAL_SEMAPHORE, "grf/Signals.png", 0) {

		tmpl_base_signals(48*2)

		tmpl_base_signals(48*3)

		tmpl_base_signals(48*4)

		tmpl_base_semaphore(48*1)

		tmpl_base_semaphore(48*2)

		tmpl_base_semaphore(48*3)

		tmpl_base_semaphore(48*4)

	}*/
 replacenew(PRE_SIGNAL_SEMAPHORE_PBS, "grf/Signals.png") {
  tmpl_base_signals(48*2)
  tmpl_base_signals(48*3)
  tmpl_base_signals(48*4)
  tmpl_base_semaphore(48*1)
  tmpl_base_semaphore(48*2)
  tmpl_base_semaphore(48*3)
  tmpl_base_semaphore(48*4)
  tmpl_base_signals(48*5)
  tmpl_base_signals(48*6)
  tmpl_base_signals(48*5)
  tmpl_base_signals(48*6)
  tmpl_base_semaphore(48*5)
  tmpl_base_semaphore(48*6)
  tmpl_base_semaphore(48*5)
  tmpl_base_semaphore(48*6)
 }
}
//#include "src/ogfx.pnml"
//Tracktypes
//Standard Gauge Branch
spriteset (SAAN_underlay, "grf/SAAN.png") {
 tmpl_underlay_track_types()
}
spriteset (SAAN_overlay, "grf/SAAN.png") {
 tmpl_overlay_track_types()
}
spriteset (SAAN_snow_underlay, "grf/SASN.png") {
 tmpl_underlay_track_types()
}
spriteset (SAAN_snow_overlay, "grf/SASN.png") {
 tmpl_overlay_track_types()
}
switch(FEAT_RAILTYPES, SELF, switch_SAAN_under_SNOW,terrain_type) {
 TILETYPE_SNOW: SAAN_snow_underlay;
 SAAN_underlay;
}
switch(FEAT_RAILTYPES, SELF, switch_SAAN_over_SNOW,terrain_type) {
 TILETYPE_SNOW: SAAN_snow_overlay;
 SAAN_overlay;
}
spriteset (SAAN_bridge_ballast, "grf/SAAN.png") {
 tmpl_bridges_overlay()
}
spriteset (SAAN_bridge_no_ballast, "grf/SAAN_bridge.png") {
 tmpl_bridges_overlay()
}
switch(FEAT_RAILTYPES, SELF, SAAN_bridge, 2*grf_future_status("\47\47\47\35") + 2*grf_current_status("\47\47\47\35") + PARAM_BRIDGE) {
 2: SAAN_bridge_no_ballast;
 SAAN_bridge_ballast;
}
spriteset (ss_SAAN_tunneltracks, "grf/SAAN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(40)
}
spriteset (ss_SASN_tunneltracks, "grf/SASN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(40)
}
switch(FEAT_RAILTYPES, SELF, SAAN_tunneltracks,terrain_type) {
 TILETYPE_SNOW: ss_SASN_tunneltracks;
 ss_SAAN_tunneltracks;
}
spriteset (ss_SAAN_tunnel, "grf/SAAN_TUNNEL.png") {
 tmpl_tunnel_overlays(0)
}
spriteset (ss_SASN_tunnel, "grf/SASN_TUNNEL.png") {
 tmpl_tunnel_overlays(0)
}
switch(FEAT_RAILTYPES, SELF, SAAN_tunnel,terrain_type) {
 TILETYPE_SNOW: ss_SASN_tunnel;
 ss_SAAN_tunnel;
}
spriteset (SAAN_gui, "grf/SAAN_GUI.png") {
 tmpl_gui()
}
spriteset (SAAN_depot, "grf/SAAN_Depot.png") {
 tmpl_depot(8)
}
spriteset (SAAN_depot_nocc, "grf/SAAN_Depot_NoCC.png") {
 tmpl_depot(8)
}
spriteset (SAAN_depot_snow, "grf/SAAN_Depot_Snow.png") {
 tmpl_depot(8)
}
switch(FEAT_RAILTYPES, SELF, switch_depot_SAAN_CC, PARAM_CC) {
 1: SAAN_depot;
 SAAN_depot_nocc;
}
switch(FEAT_RAILTYPES, SELF, switch_depot_SAAN_SNOW, terrain_type) {
 TILETYPE_SNOW: SAAN_depot_snow;
 switch_depot_SAAN_CC;
}
switch(FEAT_RAILTYPES, SELF, switch_depot_SAAN, PARAM_DEPOT) {
 1: CB_FAILED;
 switch_depot_SAAN_SNOW;
}
spriteset(SAAN_CROSS_O, "grf/SAAN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(SAAN_CROSS_C, "grf/SAAN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_SAAN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: SAAN_CROSS_C;
 SAAN_CROSS_O;
}
spriteset(SASN_CROSS_O, "grf/SASN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(SASN_CROSS_C, "grf/SASN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_SASN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: SASN_CROSS_C;
 SASN_CROSS_O;
}
switch(FEAT_RAILTYPES, SELF, sw_SAAN_crossing, terrain_type) {
 TILETYPE_SNOW: sw_SASN_sprite_crossing;
 sw_SAAN_sprite_crossing;
}
item(FEAT_RAILTYPES, SAAN_ID, 0) {
     property {
         label: "RAIL";//First of its kind gotta replace
         name: string(STR_SAAN);
         menu_text: string(STR_SAAN);
         build_window_caption: string(STR_SAAN_BUILD_CAPTION);
         autoreplace_text: string(STR_SAAN_AUTOREPLACE);
         new_engine_text: string(STR_SAAN_NEW_ENGINE);
   toolbar_caption: string(STR_SAAN_TB_CAPTION);
         compatible_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN"];
         speed_limit: (PARAM_SPEED == 0) ? 97 : (PARAM_SPEED == 1) ? 80 : 40 km/h;
   //introduction_date:			 date(1970,1,1);
   map_colour: 0x0B;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 6/4 : (PARAM_CONST == 1) ? 6/2 : (PARAM_CONST == 3) ? 6*2 : (PARAM_CONST == 4) ? 6*4 : 6;
   maintenance_cost: (PARAM_MAINT == 0) ? 6/4 : (PARAM_MAINT == 1) ? 6/2 : (PARAM_MAINT == 3) ? 6*2 : (PARAM_MAINT == 4) ? 6*4 : 6;
   sort_order: 0x00;
     }
     graphics {
         track_overlay: switch_SAAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_SAAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: SAAN_bridge; // defines the overlay drawn over bridges
   tunnels: SAAN_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SAAN; // defines the depot sprites
   gui: SAAN_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_SAAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
     }
 }
//Standard Gauge Branch
spriteset (SBAN_underlay, "grf/SBAN.png") {
 tmpl_underlay_track_types()
}
spriteset (SBAN_overlay, "grf/SBAN.png") {
 tmpl_overlay_track_types()
}
spriteset (SBAN_snow_underlay, "grf/SBSN.png") {
 tmpl_underlay_track_types()
}
spriteset (SBAN_snow_overlay, "grf/SBSN.png") {
 tmpl_overlay_track_types()
}
switch(FEAT_RAILTYPES, SELF, switch_SBAN_under_SNOW,terrain_type) {
 TILETYPE_SNOW: SBAN_snow_underlay;
 SBAN_underlay;
}
switch(FEAT_RAILTYPES, SELF, switch_SBAN_over_SNOW,terrain_type) {
 TILETYPE_SNOW: SBAN_snow_overlay;
 SBAN_overlay;
}
spriteset (SBAN_bridge_ballast, "grf/SBAN.png") {
 tmpl_bridges_overlay()
}
spriteset (SBAN_bridge_no_ballast, "grf/SBAN_bridge.png") {
 tmpl_bridges_overlay()
}
switch(FEAT_RAILTYPES, SELF, SBAN_bridge, 2*grf_future_status("\47\47\47\35") + 2*grf_current_status("\47\47\47\35") + PARAM_BRIDGE) {
 2: SBAN_bridge_no_ballast;
 SBAN_bridge_ballast;
}
spriteset (ss_SBAN_tunneltracks, "grf/SAAN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(80)
}
spriteset (ss_SBSN_tunneltracks, "grf/SASN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(80)
}
switch(FEAT_RAILTYPES, SELF, SBAN_tunneltracks,terrain_type) {
 TILETYPE_SNOW: ss_SBSN_tunneltracks;
 ss_SBAN_tunneltracks;
}/*

spriteset (SBAN_tunnel, "grf/LSM_Tunnel.png") {

	tmpl_tunnel_overlaytracks(40)

}*/
spriteset (SBAN_gui, "grf/SBAN_GUI.png") {
 tmpl_gui()
}
spriteset (SBAN_depot, "grf/SBAN_Depot.png") {
 tmpl_depot(8)
}
spriteset (SBAN_depot_nocc, "grf/SBAN_Depot_NoCC.png") {
 tmpl_depot(8)
}
spriteset (SBAN_depot_snow, "grf/SBAN_Depot_Snow.png") {
 tmpl_depot(8)
}
switch(FEAT_RAILTYPES, SELF, switch_depot_SBAN_CC, PARAM_CC) {
 1: SBAN_depot;
 SBAN_depot_nocc;
}
switch(FEAT_RAILTYPES, SELF, switch_depot_SBAN_SNOW,terrain_type) {
 TILETYPE_SNOW: SBAN_depot_snow;
 switch_depot_SBAN_CC;
}
switch(FEAT_RAILTYPES, SELF, switch_depot_SBAN, PARAM_DEPOT) {
 1: CB_FAILED;
 switch_depot_SBAN_SNOW;
}
spriteset(SBAN_CROSS_O, "grf/SBAN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(SBAN_CROSS_C, "grf/SBAN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_SBAN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: SBAN_CROSS_C;
 SBAN_CROSS_O;
}
spriteset(SBSN_CROSS_O, "grf/SBSN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(SBSN_CROSS_C, "grf/SBSN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_SBSN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: SBSN_CROSS_C;
 SBSN_CROSS_O;
}
switch(FEAT_RAILTYPES, SELF, sw_SBAN_crossing, terrain_type) {
 TILETYPE_SNOW: sw_SBSN_sprite_crossing;
 sw_SBAN_sprite_crossing;
}
item(FEAT_RAILTYPES, SBAN_ID, 1) {
     property {
         label: "SBAN";//First of its kind gotta replace
         name: string(STR_SBAN);
         menu_text: string(STR_SBAN);
         build_window_caption: string(STR_SBAN_BUILD_CAPTION);
         autoreplace_text: string(STR_SBAN_AUTOREPLACE);
         new_engine_text: string(STR_SBAN_NEW_ENGINE);
   toolbar_caption: string(STR_SBAN_TB_CAPTION);
         compatible_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN"];
         speed_limit: (PARAM_SPEED == 0) ? 145 : (PARAM_SPEED == 1) ? 121 : 70 km/h;
   introduction_date: date((PARAM_INTRO == 0) ? 0 : (PARAM_INTRO == 1) ? 1930 : 1960,1,1);
   map_colour: 0x0B;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 8/4 : (PARAM_CONST == 1) ? 8/2 : (PARAM_CONST == 3) ? 8*2 : (PARAM_CONST == 4) ? 8*4 : 8;
   maintenance_cost: (PARAM_MAINT == 0) ? 8/4 : (PARAM_MAINT == 1) ? 8/2 : (PARAM_MAINT == 3) ? 8*2 : (PARAM_MAINT == 4) ? 8*4 : 8;
   sort_order: 0x01;
     }
     graphics {
         track_overlay: switch_SBAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_SBAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: SBAN_bridge; // defines the overlay drawn over bridges
   tunnels: SBAN_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SBAN; // defines the depot sprites
   gui: SBAN_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_SBAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
     }
 }
//Standard Gauge Branch
spriteset (SAAD_gui, "grf/SAAD_GUI.png") {
 tmpl_gui()
}/*

spriteset (SAAD_depot, "grf/SAAD_Depot.png") {

	tmpl_depot(8)

}

spriteset (SAAD_depot_nocc, "grf/SAAD_Depot_NOCC.png") {

	tmpl_depot(8)

}*/
spriteset(SAAD_pylons, "grf/SAAD_PYLON.png") {
template_catenarydoublepylons()
}
spriteset(SASD_pylons, "grf/SASD_PYLON.png") {
template_catenarydoublepylons()
}
switch(FEAT_RAILTYPES, SELF, switch_pylon_SAAD, terrain_type) {
 TILETYPE_SNOW: SASD_pylons;
 SAAD_pylons;
}
spriteset(SAAD_wires, "grf/SAAD_WIRE.png") {
template_catenarywires()
}
item(FEAT_RAILTYPES, SAAD_ID, 2) {
     property {
         label: "ELRL";//First of its kind gotta replace
         name: string(STR_SAAD);
         menu_text: string(STR_SAAD);
         build_window_caption: string(STR_SAAD_BUILD_CAPTION);
         autoreplace_text: string(STR_SAAD_AUTOREPLACE);
         new_engine_text: string(STR_SAAD_NEW_ENGINE);
   toolbar_caption: string(STR_SAAD_TB_CAPTION);
         compatible_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         speed_limit: (PARAM_SPEED == 0) ? 97 : (PARAM_SPEED == 1) ? 80 : 40 km/h;
   map_colour: 0xC3;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 8/4 : (PARAM_CONST == 1) ? 8/2 : (PARAM_CONST == 3) ? 8*2 : (PARAM_CONST == 4) ? 8*4 : 8;
   maintenance_cost: (PARAM_MAINT == 0) ? 8/4 : (PARAM_MAINT == 1) ? 8/2 : (PARAM_MAINT == 3) ? 8*2 : (PARAM_MAINT == 4) ? 8*4 : 8;
   railtype_flags: bitmask(RAILTYPE_FLAG_CATENARY);
   sort_order: 0x04;
     }
     graphics {
         track_overlay: switch_SAAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_SAAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: SAAN_bridge; // defines the overlay drawn over bridges
   tunnels: SAAN_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SAAN; // defines the depot sprites
   gui: SAAD_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_SAAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
   catenary_wire: SAAD_wires;
   catenary_pylons: switch_pylon_SAAD;
     }
 }
//Standard Gauge Branch
spriteset (SBAD_gui, "grf/SBAD_GUI.png") {
 tmpl_gui()
}/*

spriteset (SBAD_depot, "grf/SBAD_Depot.png") {

	tmpl_depot(8)

}

spriteset (SBAD_depot_nocc, "grf/SBAD_Depot_NOCC.png") {

	tmpl_depot(8)

}*/
spriteset(SBAD_pylons, "grf/SBAD_PYLON.png") {
template_catenarydoublepylons()
}
spriteset(SBSD_pylons, "grf/SBSD_PYLON.png") {
template_catenarydoublepylons()
}
switch(FEAT_RAILTYPES, SELF, switch_pylon_SBAD, terrain_type) {
 TILETYPE_SNOW: SBSD_pylons;
 SBAD_pylons;
}
spriteset(SBAD_wires, "grf/SBAD_WIRE.png") {
template_catenarywires()
}
item(FEAT_RAILTYPES, SBAD_ID, 3) {
     property {
         label: "SBAD";
         name: string(STR_SBAD);
         menu_text: string(STR_SBAD);
         build_window_caption: string(STR_SBAD_BUILD_CAPTION);
         autoreplace_text: string(STR_SBAD_AUTOREPLACE);
         new_engine_text: string(STR_SBAD_NEW_ENGINE);
   toolbar_caption: string(STR_SBAD_TB_CAPTION);
         compatible_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         speed_limit: (PARAM_SPEED == 0) ? 145 : (PARAM_SPEED == 1) ? 121 : 70 km/h;
   introduction_date: date((PARAM_INTRO == 0) ? 0 : (PARAM_INTRO == 1) ? 1930 : 1960,1,1);
   map_colour: 0xC3;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 12/4 : (PARAM_CONST == 1) ? 12/2 : (PARAM_CONST == 3) ? 12*2 : (PARAM_CONST == 4) ? 12*4 : 12;
   maintenance_cost: (PARAM_MAINT == 0) ? 14/4 : (PARAM_MAINT == 1) ? 14/2 : (PARAM_MAINT == 3) ? 14*2 : (PARAM_MAINT == 4) ? 14*4 : 14;
   railtype_flags: bitmask(RAILTYPE_FLAG_CATENARY);
   sort_order: 0x05;
     }
     graphics {
         track_overlay: switch_SBAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_SBAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: SBAN_bridge; // defines the overlay drawn over bridges
   tunnels: SBAN_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SBAN; // defines the depot sprites
   gui: SBAD_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_SBAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
   catenary_wire: SBAD_wires;
   catenary_pylons: switch_pylon_SBAD;
     }
 }
//Standard Gauge Branch
spriteset (SCAN_underlay, "grf/SCAN.png") {
 tmpl_underlay_track_types()
}
spriteset (SCAN_overlay, "grf/SCAN.png") {
 tmpl_overlay_track_types()
}
spriteset (SCAN_snow_underlay, "grf/SCSN.png") {
 tmpl_underlay_track_types()
}
spriteset (SCAN_snow_overlay, "grf/SCSN.png") {
 tmpl_overlay_track_types()
}
switch(FEAT_RAILTYPES, SELF, switch_SCAN_under_SNOW,terrain_type) {
 TILETYPE_SNOW: SCAN_snow_underlay;
 SCAN_underlay;
}
switch(FEAT_RAILTYPES, SELF, switch_SCAN_over_SNOW,terrain_type) {
 TILETYPE_SNOW: SCAN_snow_overlay;
 SCAN_overlay;
}
spriteset (SCAD_bridge_ballast, "grf/SCAN.png") {
 tmpl_bridges_overlay()
}
spriteset (SCAD_bridge_no_ballast, "grf/SCAN_bridge.png") {
 tmpl_bridges_overlay()
}
switch(FEAT_RAILTYPES, SELF, SCAD_bridge, 2*grf_future_status("\47\47\47\35") + 2*grf_current_status("\47\47\47\35") + PARAM_BRIDGE) {
 2: SCAD_bridge_no_ballast;
 SCAD_bridge_ballast;
}
spriteset (ss_SCAN_tunneltracks, "grf/SAAN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(120)
}
spriteset (ss_SCSN_tunneltracks, "grf/SASN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(120)
}
switch(FEAT_RAILTYPES, SELF, SCAD_tunneltracks,terrain_type) {
 TILETYPE_SNOW: ss_SCSN_tunneltracks;
 ss_SCAN_tunneltracks;
}
/*spriteset (SCAD_tunnel, "grf/LSM_Tunnel.png") {

	tmpl_tunnel_overlaytracks(40)

}*/
spriteset (SCAD_gui, "grf/SCAD_GUI.png") {
 tmpl_gui()
}/*

spriteset (SCAD_depot, "grf/SCAD_Depot.png") {

	tmpl_depot(8)

}*/
spriteset (SCAN_depot_nocc, "grf/SCAN_Depot_NoCC.png") {
 tmpl_depot(8)
}
switch(FEAT_RAILTYPES, SELF, switch_depot_SCAN_CC, PARAM_CC) {
 1: SBAN_depot;
 SCAN_depot_nocc;
}
switch(FEAT_RAILTYPES, SELF, switch_depot_SCAN_SNOW, terrain_type) {
 TILETYPE_SNOW: SBAN_depot_snow;
 switch_depot_SCAN_CC;
}
switch(FEAT_RAILTYPES, SELF, switch_depot_SCAN, PARAM_DEPOT) {
 1: CB_FAILED;
 switch_depot_SCAN_SNOW;
}
spriteset(SCAD_pylons, "grf/SCAD_PYLON.png") {
template_catenarydoublepylons()
}
/*

spriteset(SCAD_wires, "gfx/ELRL/CatenaryWires_ELRL.png") {

template_catenarywires()

}*/
spriteset(SCAN_CROSS_O, "grf/SCAN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(SCAN_CROSS_C, "grf/SCAN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_SCAN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: SCAN_CROSS_C;
 SCAN_CROSS_O;
}
spriteset(SCSN_CROSS_O, "grf/SCSN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(SCSN_CROSS_C, "grf/SCSN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_SCSN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: SCSN_CROSS_C;
 SCSN_CROSS_O;
}
switch(FEAT_RAILTYPES, SELF, sw_SCAN_crossing, terrain_type) {
 TILETYPE_SNOW: sw_SCSN_sprite_crossing;
 sw_SCAN_sprite_crossing;
}
item(FEAT_RAILTYPES, SCAD_ID, 4) {
     property {
         label: "SCAD";
         name: string(STR_SCAD);
         menu_text: string(STR_SCAD);
         build_window_caption: string(STR_SCAD_BUILD_CAPTION);
         autoreplace_text: string(STR_SCAD_AUTOREPLACE);
         new_engine_text: string(STR_SCAD_NEW_ENGINE);
   toolbar_caption: string(STR_SCAD_TB_CAPTION);
         compatible_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         speed_limit: (PARAM_SPEED == 0) ? 0 : (PARAM_SPEED == 1) ? 0 : 101 km/h;
   introduction_date: date((PARAM_INTRO == 0) ? 0 : (PARAM_INTRO == 1) ? 1950 : 1980,1,1);
   map_colour: 0x98;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 18/4 : (PARAM_CONST == 1) ? 18/2 : (PARAM_CONST == 3) ? 18*2 : (PARAM_CONST == 4) ? 18*4 : 18;
   maintenance_cost: (PARAM_MAINT == 0) ? 18/4 : (PARAM_MAINT == 1) ? 18/2 : (PARAM_MAINT == 3) ? 18*2 : (PARAM_MAINT == 4) ? 18*4 : 18;
   railtype_flags: bitmask(RAILTYPE_FLAG_CATENARY);
   sort_order: 0x06;
     }
     graphics {
         track_overlay: switch_SCAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_SCAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: SCAD_bridge; // defines the overlay drawn over bridges
   tunnels: SCAD_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SCAN; // defines the depot sprites
   gui: SCAD_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
         fences: NO_fences; // Custom Fences since v2
   level_crossings: sw_SCAN_crossing;
   signals: sw_new_signals;
   catenary_wire: SBAD_wires;
   catenary_pylons: switch_pylon_SBAD;
     }
 }
//Standard Gauge Branch
spriteset (NAAN_underlay, "grf/NAAN.png") {
 tmpl_underlay_track_types()
}
spriteset (NAAN_overlay, "grf/NAAN.png") {
 tmpl_overlay_track_types()
}
spriteset (NAAN_snow_underlay, "grf/NASN.png") {
 tmpl_underlay_track_types()
}
spriteset (NAAN_snow_overlay, "grf/NASN.png") {
 tmpl_overlay_track_types()
}
switch(FEAT_RAILTYPES, SELF, switch_NAAN_under_SNOW,terrain_type) {
 TILETYPE_SNOW: NAAN_snow_underlay;
 NAAN_underlay;
}
switch(FEAT_RAILTYPES, SELF, switch_NAAN_over_SNOW,terrain_type) {
 TILETYPE_SNOW: NAAN_snow_overlay;
 NAAN_overlay;
}
spriteset (NAAN_bridge_ballast, "grf/NAAN.png") {
 tmpl_bridges_overlay()
}
spriteset (NAAN_bridge_no_ballast, "grf/NAAN_bridge.png") {
 tmpl_bridges_overlay()
}
switch(FEAT_RAILTYPES, SELF, NAAN_bridge, 2*grf_future_status("\47\47\47\35") + 2*grf_current_status("\47\47\47\35") + PARAM_BRIDGE) {
 2: NAAN_bridge_no_ballast;
 NAAN_bridge_ballast;
}
spriteset (ss_NAAN_tunneltracks, "grf/SAAN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(160)
}
spriteset (ss_NASN_tunneltracks, "grf/SASN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(160)
}
switch(FEAT_RAILTYPES, SELF, NAAN_tunneltracks,terrain_type) {
 TILETYPE_SNOW: ss_NASN_tunneltracks;
 ss_NAAN_tunneltracks;
}/*

spriteset (NAAN_tunnel, "grf/LSM_Tunnel.png") {

	tmpl_tunnel_overlaytracks(40)

}*/
spriteset (NAAN_gui, "grf/NAAN_GUI.png") {
 tmpl_gui()
}
spriteset(NAAN_CROSS_O, "grf/NAAN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(NAAN_CROSS_C, "grf/NAAN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_NAAN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: NAAN_CROSS_C;
 NAAN_CROSS_O;
}
spriteset(NASN_CROSS_O, "grf/NASN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(NASN_CROSS_C, "grf/NASN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_NASN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: NASN_CROSS_C;
 NASN_CROSS_O;
}
switch(FEAT_RAILTYPES, SELF, sw_NAAN_crossing, terrain_type) {
 TILETYPE_SNOW: sw_NASN_sprite_crossing;
 sw_NAAN_sprite_crossing;
}
if ((PARAM_NARROW != 2 && PARAM_SPEED == 0) || (PARAM_NARROW == 0 && PARAM_SPEED == 1)) {
item(FEAT_RAILTYPES, NAAN_ID, 6) {
     property {
         label: "NAAN";
         name: string(STR_NAAN);
         menu_text: string(STR_NAAN);
         build_window_caption: string(STR_NAAN_BUILD_CAPTION);
         autoreplace_text: string(STR_NAAN_AUTOREPLACE);
         new_engine_text: string(STR_NAAN_NEW_ENGINE);
   toolbar_caption: string(STR_NAAN_TB_CAPTION);
         compatible_railtype_list: ["NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN"];
         speed_limit: (PARAM_SPEED == 0) ? 97 : (PARAM_SPEED == 1) ? 80 : 40 km/h;
   //introduction_date:			 date(1970,1,1);
   map_colour: 0x0C;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 4/4 : (PARAM_CONST == 1) ? 4/2 : (PARAM_CONST == 3) ? 4*2 : (PARAM_CONST == 4) ? 4*4 : 4;
   maintenance_cost: (PARAM_MAINT == 0) ? 3/4 : (PARAM_MAINT == 1) ? 3/2 : (PARAM_MAINT == 3) ? 3*2 : (PARAM_MAINT == 4) ? 3*4 : 3;
   sort_order: 0x08;
   introduces_railtype_list: ["dAAN"];
     }
     graphics {
         track_overlay: switch_NAAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_NAAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: NAAN_bridge; // defines the overlay drawn over bridges
   tunnels: NAAN_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SAAN; // defines the depot sprites
   gui: NAAN_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_NAAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
     }
 }
 }
//Standard Gauge Branch
spriteset (NAAd_gui, "grf/NAAd_GUI.png") {
 tmpl_gui()
}/*

spriteset (NAAd_depot, "grf/NAAd_Depot.png") {

	tmpl_depot(8)

}

spriteset (NAAd_depot_nocc, "grf/NAAd_Depot_NOCC.png") {

	tmpl_depot(8)

}*/
spriteset(NAAd_pylons, "grf/NAAd_PYLON.png") {
template_catenarydoublepylons()
}
spriteset(NAAd_wires, "grf/SAAD_WIRE.png") {
template_catenarywires()
}
if ((PARAM_NARROW != 2 && PARAM_SPEED == 0) || (PARAM_NARROW == 0 && PARAM_SPEED == 1)) {
item(FEAT_RAILTYPES, NAAd_ID, 7) {
     property {
         label: "NABE"; //first so replace
         name: string(STR_NAAd);
         menu_text: string(STR_NAAd);
         build_window_caption: string(STR_NAAd_BUILD_CAPTION);
         autoreplace_text: string(STR_NAAd_AUTOREPLACE);
         new_engine_text: string(STR_NAAd_NEW_ENGINE);
   toolbar_caption: string(STR_NAAd_TB_CAPTION);
         compatible_railtype_list: ["NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         speed_limit: (PARAM_SPEED == 0) ? 97 : (PARAM_SPEED == 1) ? 80 : 40 km/h;
   //introduction_date:			 date(1970,1,1);
   map_colour: 0x44;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 5/4 : (PARAM_CONST == 1) ? 5/2 : (PARAM_CONST == 3) ? 5*2 : (PARAM_CONST == 4) ? 5*4 : 5;
   maintenance_cost: (PARAM_MAINT == 0) ? 4/4 : (PARAM_MAINT == 1) ? 4/2 : (PARAM_MAINT == 3) ? 4*2 : (PARAM_MAINT == 4) ? 4*4 : 4;
   railtype_flags: bitmask(RAILTYPE_FLAG_CATENARY);
   sort_order: 0x0C;
   introduces_railtype_list: ["dAAd"];
     }
     graphics {
         track_overlay: switch_NAAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_NAAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: NAAN_bridge; // defines the overlay drawn over bridges
   tunnels: NAAN_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SAAN; // defines the depot sprites
   gui: NAAd_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_NAAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
   catenary_wire: NAAd_wires;
   catenary_pylons: switch_pylon_SAAD;
     }
 }
 }
//Standard Gauge Branch
spriteset (SAA3_underlay, "grf/SAA3.png") {
 tmpl_underlay_track_types()
}
spriteset (SAA3_overlay, "grf/SAA3.png") {
 tmpl_overlay_track_types()
}
spriteset (SAA3_snow_underlay, "grf/SAS3.png") {
 tmpl_underlay_track_types()
}
spriteset (SAA3_snow_overlay, "grf/SAS3.png") {
 tmpl_overlay_track_types()
}
switch(FEAT_RAILTYPES, SELF, switch_SAA3_under_SNOW,terrain_type) {
 TILETYPE_SNOW: SAA3_snow_underlay;
 SAA3_underlay;
}
switch(FEAT_RAILTYPES, SELF, switch_SAA3_over_SNOW,terrain_type) {
 TILETYPE_SNOW: SAA3_snow_overlay;
 SAA3_overlay;
}
spriteset (SAA3_bridge, "grf/SAA3.png") {
 tmpl_bridges_overlay()
}
spriteset (SAA3_tunneltracks, "grf/SAA3.png") {
 tmpl_tunnel_tracks()
}
/*spriteset (SAA3_tunnel, "grf/LSM_Tunnel.png") {

	tmpl_tunnel_overlaytracks(40)

}*/
spriteset (SAA3_gui, "grf/SAA3_GUI.png") {
 tmpl_gui()
}
if (PARAM_METRO == 2 || PARAM_METRO == 1) {
item(FEAT_RAILTYPES, SAA3_ID, 11) {
     property {
         label: "MTRO";//First of its kind gotta replace
         name: string(STR_SAA3);
         menu_text: string(STR_SAA3);
         build_window_caption: string(STR_SAA3_BUILD_CAPTION);
         autoreplace_text: string(STR_SAA3_AUTOREPLACE);
         new_engine_text: string(STR_SAA3_NEW_ENGINE);
   toolbar_caption: string(STR_SAA3_TB_CAPTION);
         compatible_railtype_list: ["MTRO", "SAA3", "SAB3", "SAC3", "SAD3", "SAE3", "SBA3", "SBB3", "SBC3", "SBD3", "SBE3", "SCA3", "SCB3", "SCC3", "SCD3", "SCE3", "SSA3", "SSB3", "SSC3", "SSD3", "SSE3", "SUA3", "SUB3", "SUC3", "SUD3", "SUE3"];
         powered_railtype_list: ["MTRO", "SAA3", "SAB3", "SAC3", "SAD3", "SAE3", "SBA3", "SBB3", "SBC3", "SBD3", "SBE3", "SCA3", "SCB3", "SCC3", "SCD3", "SCE3", "SSA3", "SSB3", "SSC3", "SSD3", "SSE3", "SUA3", "SUB3", "SUC3", "SUD3", "SUE3"];
   alternative_railtype_list: ["MTRO", "SAA3", "SAB3", "SAC3", "SAD3", "SAE3", "SBA3", "SBB3", "SBC3", "SBD3", "SBE3", "SCA3", "SCB3", "SCC3", "SCD3", "SCE3", "SSA3", "SSB3", "SSC3", "SSD3", "SSE3", "SUA3", "SUB3", "SUC3", "SUD3", "SUE3"];
         speed_limit: (PARAM_SPEED == 0) ? 145 : (PARAM_SPEED == 1) ? 121 : 91 km/h;
   introduction_date: date((PARAM_INTRO == 0) ? 0 : (PARAM_INTRO == 1) ? 1900 : 1965,1,1);
   map_colour: 0xC3;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 12/4 : (PARAM_CONST == 1) ? 12/2 : (PARAM_CONST == 3) ? 12*2 : (PARAM_CONST == 4) ? 12*4 : 12;
   maintenance_cost: (PARAM_MAINT == 0) ? 10/4 : (PARAM_MAINT == 1) ? 10/2 : (PARAM_MAINT == 3) ? 10*2 : (PARAM_MAINT == 4) ? 10*4 : 10;
   railtype_flags: bitmask(RAILTYPE_FLAG_NO_LEVEL_CROSSING);
   sort_order: 0x18;
     }
     graphics {
         track_overlay: switch_SAA3_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_SAA3_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: SAA3_bridge; // defines the overlay drawn over bridges
   tunnels: SSA3_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SBAN; // defines the depot sprites
   gui: SAA3_gui; // defines the gui sprites
   signals: sw_new_signals;
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
         fences: NO_fences; // Custom Fences since v2
     }
 }
}
//Standard Gauge Branch
spriteset (SSA3_underlay, "grf/SUA3.png") {
 tmpl_underlay_track_types()
}
spriteset (SSA3_overlay, "grf/SUA3.png") {
 tmpl_overlay_track_types()
}
spriteset (SSA3_bridge, "grf/SUA3.png") {
 tmpl_bridges_overlay()
}
spriteset (SSA3_tunnel, "grf/SSA3_TUNNEL.png") {
 tmpl_tunnel_overlays(0)
}
spriteset (SSA3_tunneltracks, "grf/SSA3_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(40)
}
spriteset (SSS3_tunnel, "grf/SSS3_TUNNEL.png") {
 tmpl_tunnel_overlays(0)
}
spriteset (SSS3_tunneltracks, "grf/SSS3_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(40)
}
switch(FEAT_RAILTYPES, SELF, switch_tunnel_SSAN, terrain_type) {
 TILETYPE_SNOW: SSS3_tunnel;
 SSA3_tunnel;
}
spriteset(SSA3_pylons, "grf/SSA3_WIRE.png") {
template_nopylons()
}
spriteset(SSA3_wires, "grf/SSA3_WIRE.png") {
template_metroroof()
}
spriteset(SSS3_wires, "grf/SSS3_WIRE.png") {
template_metroroof()
}
switch(FEAT_RAILTYPES, SELF, switch_wires_SSAN, terrain_type) {
 TILETYPE_SNOW: SSS3_wires;
 SSA3_wires;
}
spriteset (SSA3_gui, "grf/SSA3_GUI.png") {
 tmpl_gui()
}
spriteset (SSAN_depot_nocc, "grf/SSA3_Depot.png") {
 tmpl_depot(8)
}
spriteset (SSS3_depot_nocc, "grf/SSS3_Depot.png") {
 tmpl_depot(8)
}
switch(FEAT_RAILTYPES, SELF, switch_depot_SSAN_SNOW, terrain_type) {
 TILETYPE_SNOW: SSS3_depot_nocc;
 SSAN_depot_nocc;
}
switch(FEAT_RAILTYPES, SELF, switch_depot_SSAN, PARAM_DEPOT) {
 1: CB_FAILED;
 switch_depot_SSAN_SNOW;
}
if (PARAM_METRO == 0 || PARAM_METRO == 1) {
item(FEAT_RAILTYPES, SSA3_ID, 12) {
     property {
         label: "SSA3";
         name: string(STR_SSA3);
         menu_text: string(STR_SSA3);
         build_window_caption: string(STR_SSA3_BUILD_CAPTION);
         autoreplace_text: string(STR_SSA3_AUTOREPLACE);
         new_engine_text: string(STR_SSA3_NEW_ENGINE);
   toolbar_caption: string(STR_SSA3_TB_CAPTION);
         compatible_railtype_list: ["MTRO", "SAA3", "SAB3", "SAC3", "SAD3", "SAE3", "SBA3", "SBB3", "SBC3", "SBD3", "SBE3", "SCA3", "SCB3", "SCC3", "SCD3", "SCE3", "SSA3", "SSB3", "SSC3", "SSD3", "SSE3", "SUA3", "SUB3", "SUC3", "SUD3", "SUE3"];
         powered_railtype_list: ["MTRO", "SAA3", "SAB3", "SAC3", "SAD3", "SAE3", "SBA3", "SBB3", "SBC3", "SBD3", "SBE3", "SCA3", "SCB3", "SCC3", "SCD3", "SCE3", "SSA3", "SSB3", "SSC3", "SSD3", "SSE3", "SUA3", "SUB3", "SUC3", "SUD3", "SUE3"];
   alternative_railtype_list: ["MTRO", "SAA3", "SAB3", "SAC3", "SAD3", "SAE3", "SBA3", "SBB3", "SBC3", "SBD3", "SBE3", "SCA3", "SCB3", "SCC3", "SCD3", "SCE3", "SSA3", "SSB3", "SSC3", "SSD3", "SSE3", "SUA3", "SUB3", "SUC3", "SUD3", "SUE3"];
         speed_limit: (PARAM_SPEED == 0) ? 145 : (PARAM_SPEED == 1) ? 121 : 91 km/h;
   introduction_date: date((PARAM_INTRO == 0) ? 0 : (PARAM_INTRO == 1) ? 1900 : 1965,1,1);
   map_colour: 0xC3;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 12/4 : (PARAM_CONST == 1) ? 12/2 : (PARAM_CONST == 3) ? 12*2 : (PARAM_CONST == 4) ? 12*4 : 12;
   maintenance_cost: (PARAM_MAINT == 0) ? 10/4 : (PARAM_MAINT == 1) ? 10/2 : (PARAM_MAINT == 3) ? 10*2 : (PARAM_MAINT == 4) ? 10*4 : 10;
   railtype_flags: bitmask(RAILTYPE_FLAG_NO_LEVEL_CROSSING, RAILTYPE_FLAG_CATENARY);
   sort_order: 0x1A;
     }
     graphics {
         track_overlay: SSA3_overlay; // defines the sprites drawn as overlay for junctions and highlight
         underlay: SSA3_underlay; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: SSA3_bridge; // defines the overlay drawn over bridges
   tunnels: SSA3_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SSAN; // defines the depot sprites
   gui: SSA3_gui; // defines the gui sprites
   signals: sw_new_signals;
   tunnel_overlay: switch_tunnel_SSAN; // Custom Tunnel portals since v2
         fences: NO_fences; // Custom Fences since v2
   catenary_wire: switch_wires_SSAN;
   catenary_pylons: SSA3_pylons;
     }
 }
}
//Standard Gauge Branch
spriteset (NBAN_underlay, "grf/NBAN.png") {
 tmpl_underlay_track_types()
}
spriteset (NBAN_overlay, "grf/NBAN.png") {
 tmpl_overlay_track_types()
}
spriteset (NBAN_snow_underlay, "grf/NBSN.png") {
 tmpl_underlay_track_types()
}
spriteset (NBAN_snow_overlay, "grf/NBSN.png") {
 tmpl_overlay_track_types()
}
switch(FEAT_RAILTYPES, SELF, switch_NBAN_under_SNOW,terrain_type) {
 TILETYPE_SNOW: NBAN_snow_underlay;
 NBAN_underlay;
}
switch(FEAT_RAILTYPES, SELF, switch_NBAN_over_SNOW,terrain_type) {
 TILETYPE_SNOW: NBAN_snow_overlay;
 NBAN_overlay;
}
spriteset (NBAN_bridge_ballast, "grf/NBAN.png") {
 tmpl_bridges_overlay()
}
spriteset (NBAN_bridge_no_ballast, "grf/NBAN_bridge.png") {
 tmpl_bridges_overlay()
}
switch(FEAT_RAILTYPES, SELF, NBAN_bridge, 2*grf_future_status("\47\47\47\35") + 2*grf_current_status("\47\47\47\35") + PARAM_BRIDGE) {
 2: NBAN_bridge_no_ballast;
 NBAN_bridge_ballast;
}
spriteset (ss_NBAN_tunneltracks, "grf/SAAN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(200)
}
spriteset (ss_NBSN_tunneltracks, "grf/SASN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(200)
}
switch(FEAT_RAILTYPES, SELF, NBAN_tunneltracks,terrain_type) {
 TILETYPE_SNOW: ss_NBSN_tunneltracks;
 ss_NBAN_tunneltracks;
}/*

spriteset (NBAN_tunnel, "grf/LSM_Tunnel.png") {

	tmpl_tunnel_overlaytracks(40)

}*/
spriteset (NBAN_gui, "grf/NBAN_GUI.png") {
 tmpl_gui()
}
spriteset(NBAN_CROSS_O, "grf/NBAN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(NBAN_CROSS_C, "grf/NBAN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_NBAN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: NBAN_CROSS_C;
 NBAN_CROSS_O;
}
spriteset(NBSN_CROSS_O, "grf/NBSN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(NBSN_CROSS_C, "grf/NBSN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_NBSN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: NBSN_CROSS_C;
 NBSN_CROSS_O;
}
switch(FEAT_RAILTYPES, SELF, sw_NBAN_crossing, terrain_type) {
 TILETYPE_SNOW: sw_NBSN_sprite_crossing;
 sw_NBAN_sprite_crossing;
}
if ((PARAM_NARROW != 2 && PARAM_SPEED == 1) || (PARAM_NARROW == 0 && PARAM_SPEED == 0)) {
item(FEAT_RAILTYPES, NBAN_ID, 8) {
     property {
         label: "NBAN";
         name: string(STR_NBAN);
         menu_text: string(STR_NBAN);
         build_window_caption: string(STR_NBAN_BUILD_CAPTION);
         autoreplace_text: string(STR_NBAN_AUTOREPLACE);
         new_engine_text: string(STR_NBAN_NEW_ENGINE);
   toolbar_caption: string(STR_NBAN_TB_CAPTION);
         compatible_railtype_list: ["NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN"];
         speed_limit: (PARAM_SPEED == 0) ? 145 : (PARAM_SPEED == 1) ? 121 : 70 km/h;
   introduction_date: date((PARAM_INTRO == 0) ? 0 : (PARAM_INTRO == 1) ? 1930 : 1960,1,1);
   map_colour: 0x0C;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 5/4 : (PARAM_CONST == 1) ? 5/2 : (PARAM_CONST == 3) ? 5*2 : (PARAM_CONST == 4) ? 5*4 : 5;
   maintenance_cost: (PARAM_MAINT == 0) ? 4/4 : (PARAM_MAINT == 1) ? 4/2 : (PARAM_MAINT == 3) ? 4*2 : (PARAM_MAINT == 4) ? 4*4 : 4;
   sort_order: 0x09;
   introduces_railtype_list: ["dBAN"];
     }
     graphics {
         track_overlay: switch_NBAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_NBAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: NBAN_bridge; // defines the overlay drawn over bridges
   tunnels: NBAN_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SBAN; // defines the depot sprites
   gui: NBAN_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_NBAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
     }
 }
 }
//Standard Gauge Branch
spriteset (NBAd_gui, "grf/NBAd_GUI.png") {
 tmpl_gui()
}/*

spriteset (NBAd_depot, "grf/NBAd_Depot.png") {

	tmpl_depot(8)

}

spriteset (NBAd_depot_nocc, "grf/NBAd_Depot_NOCC.png") {

	tmpl_depot(8)

}*/
spriteset(NBAd_pylons, "grf/NBAd_PYLON.png") {
template_catenarydoublepylons()
}
spriteset(NBAd_wires, "grf/SBAD_WIRE.png") {
template_catenarywires()
}
if ((PARAM_NARROW != 2 && PARAM_SPEED == 1) || (PARAM_NARROW == 0 && PARAM_SPEED == 0)) {
item(FEAT_RAILTYPES, NBAd_ID, 9) {
     property {
         label: "NBAd";
         name: string(STR_NBAd);
         menu_text: string(STR_NBAd);
         build_window_caption: string(STR_NBAd_BUILD_CAPTION);
         autoreplace_text: string(STR_NBAd_AUTOREPLACE);
         new_engine_text: string(STR_NBAd_NEW_ENGINE);
   toolbar_caption: string(STR_NBAd_TB_CAPTION);
         compatible_railtype_list: ["NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         speed_limit: (PARAM_SPEED == 0) ? 145 : (PARAM_SPEED == 1) ? 121 : 70 km/h;
   introduction_date: date((PARAM_INTRO == 0) ? 0 : (PARAM_INTRO == 1) ? 1930 : 1960,1,1);
   map_colour: 0x44;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 6/4 : (PARAM_CONST == 1) ? 6/2 : (PARAM_CONST == 3) ? 6*2 : (PARAM_CONST == 4) ? 6*4 : 6;
   maintenance_cost: (PARAM_MAINT == 0) ? 5/4 : (PARAM_MAINT == 1) ? 5/2 : (PARAM_MAINT == 3) ? 5*2 : (PARAM_MAINT == 4) ? 5*4 : 5;
   railtype_flags: bitmask(RAILTYPE_FLAG_CATENARY);
   sort_order: 0x0D;
   introduces_railtype_list: ["dBAd"];
         requires_railtype_list: ["NABE"];
     }
     graphics {
         track_overlay: switch_NBAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_NBAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: NBAN_bridge; // defines the overlay drawn over bridges
   tunnels: NBAN_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SBAN; // defines the depot sprites
   gui: NBAd_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_NBAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
   catenary_wire: NBAd_wires;
   catenary_pylons: switch_pylon_SBAD;
     }
 }
 }
//Standard Gauge Branch
spriteset (NCAN_underlay, "grf/NCAN.png") {
 tmpl_underlay_track_types()
}
spriteset (NCAN_overlay, "grf/NCAN.png") {
 tmpl_overlay_track_types()
}
spriteset (NCAN_snow_underlay, "grf/NCSN.png") {
 tmpl_underlay_track_types()
}
spriteset (NCAN_snow_overlay, "grf/NCSN.png") {
 tmpl_overlay_track_types()
}
switch(FEAT_RAILTYPES, SELF, switch_NCAN_under_SNOW,terrain_type) {
 TILETYPE_SNOW: NCAN_snow_underlay;
 NCAN_underlay;
}
switch(FEAT_RAILTYPES, SELF, switch_NCAN_over_SNOW,terrain_type) {
 TILETYPE_SNOW: NCAN_snow_overlay;
 NCAN_overlay;
}
spriteset (NCAd_bridge_ballast, "grf/NCAN.png") {
 tmpl_bridges_overlay()
}
spriteset (NCAd_bridge_no_ballast, "grf/NCAN_bridge.png") {
 tmpl_bridges_overlay()
}
switch(FEAT_RAILTYPES, SELF, NCAd_bridge, 2*grf_future_status("\47\47\47\35") + 2*grf_current_status("\47\47\47\35") + PARAM_BRIDGE) {
 2: NCAd_bridge_no_ballast;
 NCAd_bridge_ballast;
}
spriteset (ss_NCAN_tunneltracks, "grf/SAAN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(240)
}
spriteset (ss_NCSN_tunneltracks, "grf/SASN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(240)
}
switch(FEAT_RAILTYPES, SELF, NCAd_tunneltracks,terrain_type) {
 TILETYPE_SNOW: ss_NCSN_tunneltracks;
 ss_NCAN_tunneltracks;
}/*

spriteset (NCAd_tunnel, "grf/LSM_Tunnel.png") {

	tmpl_tunnel_overlaytracks(40)

}*/
spriteset (NCAd_gui, "grf/NCAd_GUI.png") {
 tmpl_gui()
}/*

spriteset (NCAd_depot, "grf/NCAd_Depot.png") {

	tmpl_depot(8)

}

spriteset (NCAd_depot_nocc, "grf/NCAd_Depot_NOCC.png") {

	tmpl_depot(8)

}*/
spriteset(NCAd_pylons, "grf/NBAd_PYLON.png") {
template_catenarydoublepylons()
}
spriteset(NCAd_wires, "grf/SBAD_WIRE.png") {
template_catenarywires()
}
spriteset(NCAN_CROSS_O, "grf/NCAN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(NCAN_CROSS_C, "grf/NCAN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_NCAN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: NCAN_CROSS_C;
 NCAN_CROSS_O;
}
spriteset(NCSN_CROSS_O, "grf/NCSN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(NCSN_CROSS_C, "grf/NCSN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_NCSN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: NCSN_CROSS_C;
 NCSN_CROSS_O;
}
switch(FEAT_RAILTYPES, SELF, sw_NCAN_crossing, terrain_type) {
 TILETYPE_SNOW: sw_NCSN_sprite_crossing;
 sw_NCAN_sprite_crossing;
}
if (PARAM_NARROW == 0) {
item(FEAT_RAILTYPES, NCAd_ID, 10) {
     property {
         label: "NCAd";
         name: string(STR_NCAd);
         menu_text: string(STR_NCAd);
         build_window_caption: string(STR_NCAd_BUILD_CAPTION);
         autoreplace_text: string(STR_NCAd_AUTOREPLACE);
         new_engine_text: string(STR_NCAd_NEW_ENGINE);
   toolbar_caption: string(STR_NCAd_TB_CAPTION);
         compatible_railtype_list: ["NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         speed_limit: (PARAM_SPEED == 0) ? 0 : (PARAM_SPEED == 1) ? 0 : 101 km/h;
   introduction_date: date((PARAM_INTRO == 0) ? 0 : (PARAM_INTRO == 1) ? 1950 : 1980,1,1);
   map_colour: 0x44;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 7/4 : (PARAM_CONST == 1) ? 7/2 : (PARAM_CONST == 3) ? 7*2 : (PARAM_CONST == 4) ? 7*4 : 7;
   maintenance_cost: (PARAM_MAINT == 0) ? 6/4 : (PARAM_MAINT == 1) ? 6/2 : (PARAM_MAINT == 3) ? 6*2 : (PARAM_MAINT == 4) ? 6*4 : 6;
   railtype_flags: bitmask(RAILTYPE_FLAG_CATENARY);
   sort_order: 0x0E;
   introduces_railtype_list: ["dCAd"];
   requires_railtype_list: ["NABE"];
     }
     graphics {
         track_overlay: switch_NCAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_NCAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: NCAd_bridge; // defines the overlay drawn over bridges
   tunnels: NCAd_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SCAN; // defines the depot sprites
   gui: NCAd_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_NCAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
   catenary_wire: NCAd_wires;
   catenary_pylons: switch_pylon_SBAD;
     }
 }
 }
//Standard Gauge Branch
spriteset (dAAN_underlay, "grf/dAAN.png") {
 tmpl_underlay_track_types()
}
spriteset (dAAN_overlay, "grf/dAAN.png") {
 tmpl_overlay_track_types()
}
spriteset (dAAN_snow_underlay, "grf/dASN.png") {
 tmpl_underlay_track_types()
}
spriteset (dAAN_snow_overlay, "grf/dASN.png") {
 tmpl_overlay_track_types()
}
switch(FEAT_RAILTYPES, SELF, switch_dAAN_under_SNOW,terrain_type) {
 TILETYPE_SNOW: dAAN_snow_underlay;
 dAAN_underlay;
}
switch(FEAT_RAILTYPES, SELF, switch_dAAN_over_SNOW,terrain_type) {
 TILETYPE_SNOW: dAAN_snow_overlay;
 dAAN_overlay;
}
spriteset (dAAN_bridge_ballast, "grf/dAAN.png") {
 tmpl_bridges_overlay()
}
spriteset (dAAN_bridge_no_ballast, "grf/dAAN_bridge.png") {
 tmpl_bridges_overlay()
}
switch(FEAT_RAILTYPES, SELF, dAAN_bridge, 2*grf_future_status("\47\47\47\35") + 2*grf_current_status("\47\47\47\35") + PARAM_BRIDGE) {
 2: dAAN_bridge_no_ballast;
 dAAN_bridge_ballast;
}
spriteset (ss_dAAN_tunneltracks, "grf/SAAN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(280)
}
spriteset (ss_dASN_tunneltracks, "grf/SASN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(280)
}
switch(FEAT_RAILTYPES, SELF, dAAN_tunneltracks,terrain_type) {
 TILETYPE_SNOW: ss_dASN_tunneltracks;
 ss_dAAN_tunneltracks;
}/*

spriteset (NAAd_tunnel, "grf/LSM_Tunnel.png") {

	tmpl_tunnel_overlaytracks(40)

}*/
/*

spriteset (NAAd_depot, "grf/NAAd_Depot.png") {

	tmpl_depot(8)

}

spriteset (NAAd_depot_nocc, "grf/NAAd_Depot_NOCC.png") {

	tmpl_depot(8)

}*/
spriteset(dAAN_CROSS_O, "grf/dAAN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(dAAN_CROSS_C, "grf/dAAN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_dAAN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: dAAN_CROSS_C;
 dAAN_CROSS_O;
}
spriteset(dASN_CROSS_O, "grf/dASN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(dASN_CROSS_C, "grf/dASN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_dASN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: dASN_CROSS_C;
 dASN_CROSS_O;
}
switch(FEAT_RAILTYPES, SELF, sw_dAAN_crossing, terrain_type) {
 TILETYPE_SNOW: sw_dASN_sprite_crossing;
 sw_dAAN_sprite_crossing;
}
if (PARAM_DUAL && ((PARAM_NARROW != 2 && PARAM_SPEED == 0) || (PARAM_NARROW == 0 && PARAM_SPEED == 1))) {
item(FEAT_RAILTYPES, dAAN_ID, 15) {
     property {
         label: "dAAN"; //first so replace
         name: string(STR_dAAN);
         menu_text: string(STR_dAAN);
         build_window_caption: string(STR_dAAN_BUILD_CAPTION);
         autoreplace_text: string(STR_dAAN_AUTOREPLACE);
         new_engine_text: string(STR_dAAN_NEW_ENGINE);
   toolbar_caption: string(STR_dAAN_TB_CAPTION);
         compatible_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN"];
         speed_limit: (PARAM_SPEED == 0) ? 97 : (PARAM_SPEED == 1) ? 80 : 40 km/h;
   //introduction_date:			 date(1970,1,1);
   map_colour: 0x0A;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 5/4 : (PARAM_CONST == 1) ? 5/2 : (PARAM_CONST == 3) ? 5*2 : (PARAM_CONST == 4) ? 5*4 : 5;
   maintenance_cost: (PARAM_MAINT == 0) ? 4/4 : (PARAM_MAINT == 1) ? 4/2 : (PARAM_MAINT == 3) ? 4*2 : (PARAM_MAINT == 4) ? 4*4 : 4;
   sort_order: 0x10;
     }
     graphics {
         track_overlay: switch_dAAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_dAAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: dAAN_bridge; // defines the overlay drawn over bridges
   tunnels: dAAN_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SAAN; // defines the depot sprites
   gui: NAAN_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_dAAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
     }
 }
 }
//Standard Gauge Branch
if (PARAM_DUAL && ((PARAM_NARROW != 2 && PARAM_SPEED == 0) || (PARAM_NARROW == 0 && PARAM_SPEED == 1))) {
item(FEAT_RAILTYPES, dAAd_ID, 16) {
     property {
         label: "dAAd"; //first so replace
         name: string(STR_dAAd);
         menu_text: string(STR_dAAd);
         build_window_caption: string(STR_dAAd_BUILD_CAPTION);
         autoreplace_text: string(STR_dAAd_AUTOREPLACE);
         new_engine_text: string(STR_dAAd_NEW_ENGINE);
   toolbar_caption: string(STR_dAAd_TB_CAPTION);
         compatible_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         speed_limit: (PARAM_SPEED == 0) ? 97 : (PARAM_SPEED == 1) ? 80 : 40 km/h;
   //introduction_date:			 date(1970,1,1);
   map_colour: 0x42;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 5/4 : (PARAM_CONST == 1) ? 5/2 : (PARAM_CONST == 3) ? 5*2 : (PARAM_CONST == 4) ? 5*4 : 5;
   maintenance_cost: (PARAM_MAINT == 0) ? 4/4 : (PARAM_MAINT == 1) ? 4/2 : (PARAM_MAINT == 3) ? 4*2 : (PARAM_MAINT == 4) ? 4*4 : 4;
   railtype_flags: bitmask(RAILTYPE_FLAG_CATENARY);
   sort_order: 0x14;
     }
     graphics {
         track_overlay: switch_dAAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_dAAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: dAAN_bridge; // defines the overlay drawn over bridges
   tunnels: dAAN_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SAAN; // defines the depot sprites
   gui: NAAd_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_dAAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
   catenary_wire: NAAd_wires;
   catenary_pylons: switch_pylon_SAAD;
     }
 }
 }
//Standard Gauge Branch
spriteset (dBAN_underlay, "grf/dBAN.png") {
 tmpl_underlay_track_types()
}
spriteset (dBAN_overlay, "grf/dBAN.png") {
 tmpl_overlay_track_types()
}
spriteset (dBAN_snow_underlay, "grf/dBSN.png") {
 tmpl_underlay_track_types()
}
spriteset (dBAN_snow_overlay, "grf/dBSN.png") {
 tmpl_overlay_track_types()
}
switch(FEAT_RAILTYPES, SELF, switch_dBAN_under_SNOW,terrain_type) {
 TILETYPE_SNOW: dBAN_snow_underlay;
 dBAN_underlay;
}
switch(FEAT_RAILTYPES, SELF, switch_dBAN_over_SNOW,terrain_type) {
 TILETYPE_SNOW: dBAN_snow_overlay;
 dBAN_overlay;
}
spriteset (dBAN_bridge_ballast, "grf/dBAN.png") {
 tmpl_bridges_overlay()
}
spriteset (dBAN_bridge_no_ballast, "grf/dBAN_bridge.png") {
 tmpl_bridges_overlay()
}
switch(FEAT_RAILTYPES, SELF, dBAN_bridge, 2*grf_future_status("\47\47\47\35") + 2*grf_current_status("\47\47\47\35") + PARAM_BRIDGE) {
 2: dBAN_bridge_no_ballast;
 dBAN_bridge_ballast;
}
spriteset (ss_dBAN_tunneltracks, "grf/SAAN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(320)
}
spriteset (ss_dBSN_tunneltracks, "grf/SASN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(320)
}
switch(FEAT_RAILTYPES, SELF, dBAN_tunneltracks,terrain_type) {
 TILETYPE_SNOW: ss_dBSN_tunneltracks;
 ss_dBAN_tunneltracks;
}/*

spriteset (NAAd_tunnel, "grf/LSM_Tunnel.png") {

	tmpl_tunnel_overlaytracks(40)

}*/
/*

spriteset (NAAd_depot, "grf/NAAd_Depot.png") {

	tmpl_depot(8)

}

spriteset (NAAd_depot_nocc, "grf/NAAd_Depot_NOCC.png") {

	tmpl_depot(8)

}*/
spriteset(dBAN_CROSS_O, "grf/dBAN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(dBAN_CROSS_C, "grf/dBAN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_dBAN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: dBAN_CROSS_C;
 dBAN_CROSS_O;
}
spriteset(dBSN_CROSS_O, "grf/dBSN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(dBSN_CROSS_C, "grf/dBSN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_dBSN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: dBSN_CROSS_C;
 dBSN_CROSS_O;
}
switch(FEAT_RAILTYPES, SELF, sw_dBAN_crossing, terrain_type) {
 TILETYPE_SNOW: sw_dBSN_sprite_crossing;
 sw_dBAN_sprite_crossing;
}
if (PARAM_DUAL && ((PARAM_NARROW != 2 && PARAM_SPEED == 1) || (PARAM_NARROW == 0 && PARAM_SPEED == 0))) {
item(FEAT_RAILTYPES, dBAN_ID, 17) {
     property {
         label: "dBAN"; //first so replace
         name: string(STR_dBAN);
         menu_text: string(STR_dBAN);
         build_window_caption: string(STR_dBAN_BUILD_CAPTION);
         autoreplace_text: string(STR_dBAN_AUTOREPLACE);
         new_engine_text: string(STR_dBAN_NEW_ENGINE);
   toolbar_caption: string(STR_dBAN_TB_CAPTION);
         compatible_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN"];
         speed_limit: (PARAM_SPEED == 0) ? 145 : (PARAM_SPEED == 1) ? 121 : 70 km/h;
   //introduction_date:			 date(1970,1,1);
   map_colour: 0x0A;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 5/4 : (PARAM_CONST == 1) ? 5/2 : (PARAM_CONST == 3) ? 5*2 : (PARAM_CONST == 4) ? 5*4 : 5;
   maintenance_cost: (PARAM_MAINT == 0) ? 4/4 : (PARAM_MAINT == 1) ? 4/2 : (PARAM_MAINT == 3) ? 4*2 : (PARAM_MAINT == 4) ? 4*4 : 4;
   sort_order: 0x11;
     }
     graphics {
         track_overlay: switch_dBAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_dBAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: dBAN_bridge; // defines the overlay drawn over bridges
   tunnels: dBAN_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SAAN; // defines the depot sprites
   gui: NBAN_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_dBAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
     }
 }
 }
//Standard Gauge Branch
if (PARAM_DUAL && ((PARAM_NARROW != 2 && PARAM_SPEED == 1) || (PARAM_NARROW == 0 && PARAM_SPEED == 0))) {
item(FEAT_RAILTYPES, dBAd_ID, 18) {
     property {
         label: "dBAd"; //first so replace
         name: string(STR_dBAd);
         menu_text: string(STR_dBAd);
         build_window_caption: string(STR_dBAd_BUILD_CAPTION);
         autoreplace_text: string(STR_dBAd_AUTOREPLACE);
         new_engine_text: string(STR_dBAd_NEW_ENGINE);
   toolbar_caption: string(STR_dBAd_TB_CAPTION);
         compatible_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         speed_limit: (PARAM_SPEED == 0) ? 145 : (PARAM_SPEED == 1) ? 121 : 70 km/h;
   //introduction_date:			 date(1970,1,1);
   map_colour: 0x42;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 5/4 : (PARAM_CONST == 1) ? 5/2 : (PARAM_CONST == 3) ? 5*2 : (PARAM_CONST == 4) ? 5*4 : 5;
   maintenance_cost: (PARAM_MAINT == 0) ? 4/4 : (PARAM_MAINT == 1) ? 4/2 : (PARAM_MAINT == 3) ? 4*2 : (PARAM_MAINT == 4) ? 4*4 : 4;
   railtype_flags: bitmask(RAILTYPE_FLAG_CATENARY);
   sort_order: 0x15;
     }
     graphics {
         track_overlay: switch_dBAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_dBAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: dBAN_bridge; // defines the overlay drawn over bridges
   tunnels: dBAN_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SAAN; // defines the depot sprites
   gui: NBAd_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_dBAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
   catenary_wire: NBAd_wires;
   catenary_pylons: switch_pylon_SBAD;
     }
 }
 }
//Standard Gauge Branch
spriteset (dCAN_underlay, "grf/dCAN.png") {
 tmpl_underlay_track_types()
}
spriteset (dCAN_overlay, "grf/dCAN.png") {
 tmpl_overlay_track_types()
}
spriteset (dCAN_snow_underlay, "grf/dCSN.png") {
 tmpl_underlay_track_types()
}
spriteset (dCAN_snow_overlay, "grf/dCSN.png") {
 tmpl_overlay_track_types()
}
switch(FEAT_RAILTYPES, SELF, switch_dCAN_under_SNOW,terrain_type) {
 TILETYPE_SNOW: dCAN_snow_underlay;
 dCAN_underlay;
}
switch(FEAT_RAILTYPES, SELF, switch_dCAN_over_SNOW,terrain_type) {
 TILETYPE_SNOW: dCAN_snow_overlay;
 dCAN_overlay;
}
spriteset (dCAd_bridge_ballast, "grf/dCAN.png") {
 tmpl_bridges_overlay()
}
spriteset (dCAd_bridge_no_ballast, "grf/dCAN_bridge.png") {
 tmpl_bridges_overlay()
}
switch(FEAT_RAILTYPES, SELF, dCAd_bridge, 2*grf_future_status("\47\47\47\35") + 2*grf_current_status("\47\47\47\35") + PARAM_BRIDGE) {
 2: dCAd_bridge_no_ballast;
 dCAd_bridge_ballast;
}
spriteset (ss_dCAN_tunneltracks, "grf/SAAN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(360)
}
spriteset (ss_dCSN_tunneltracks, "grf/SASN_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(360)
}
switch(FEAT_RAILTYPES, SELF, dCAd_tunneltracks,terrain_type) {
 TILETYPE_SNOW: ss_dCSN_tunneltracks;
 ss_dCAN_tunneltracks;
}/*

spriteset (NBAd_tunnel, "grf/LSM_Tunnel.png") {

	tmpl_tunnel_overlaytracks(40)

}*/
/*

spriteset (NBAd_depot, "grf/NBAd_Depot.png") {

	tmpl_depot(8)

}

spriteset (NBAd_depot_nocc, "grf/NBAd_Depot_NOCC.png") {

	tmpl_depot(8)

}*/
spriteset(dCAN_CROSS_O, "grf/dCAN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(dCAN_CROSS_C, "grf/dCAN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_dCAN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: dCAN_CROSS_C;
 dCAN_CROSS_O;
}
spriteset(dCSN_CROSS_O, "grf/dCSN_CROSS.png") {
 tmpl_level_crossing_track_types_open(24)
}
spriteset(dCSN_CROSS_C, "grf/dCSN_CROSS.png") {
 tmpl_level_crossing_track_types_closed(48)
}
switch(FEAT_RAILTYPES, SELF, sw_dCSN_sprite_crossing, level_crossing_status) {
 LEVEL_CROSSING_CLOSED: dCSN_CROSS_C;
 dCSN_CROSS_O;
}
switch(FEAT_RAILTYPES, SELF, sw_dCAN_crossing, terrain_type) {
 TILETYPE_SNOW: sw_dCSN_sprite_crossing;
 sw_dCAN_sprite_crossing;
}
if (PARAM_DUAL == 1 && PARAM_NARROW == 0) {
item(FEAT_RAILTYPES, dCAd_ID, 19) {
     property {
         label: "dCAd"; //first so replace
         name: string(STR_dCAd);
         menu_text: string(STR_dCAd);
         build_window_caption: string(STR_dCAd_BUILD_CAPTION);
         autoreplace_text: string(STR_dCAd_AUTOREPLACE);
         new_engine_text: string(STR_dCAd_NEW_ENGINE);
   toolbar_caption: string(STR_dCAd_TB_CAPTION);
         compatible_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         speed_limit: (PARAM_SPEED == 0) ? 0 : (PARAM_SPEED == 1) ? 0 : 101 km/h;
   //introduction_date:			 date(1970,1,1);
   map_colour: 0x42;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 19/4 : (PARAM_CONST == 1) ? 19/2 : (PARAM_CONST == 3) ? 19*2 : (PARAM_CONST == 4) ? 19*4 : 19;
   maintenance_cost: (PARAM_MAINT == 0) ? 19/4 : (PARAM_MAINT == 1) ? 19/2 : (PARAM_MAINT == 3) ? 19*2 : (PARAM_MAINT == 4) ? 19*4 : 19;
   railtype_flags: bitmask(RAILTYPE_FLAG_CATENARY);
   sort_order: 0x16;
     }
     graphics {
         track_overlay: switch_dCAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_dCAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: dCAd_bridge; // defines the overlay drawn over bridges
   tunnels: dCAd_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SCAN; // defines the depot sprites
   gui: NCAd_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_dCAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
   catenary_wire: NBAd_wires;
   catenary_pylons: switch_pylon_SBAD;
     }
 }
 }
//Standard Gauge Branch
spriteset (SUAN_underlay, "grf/SUAN.png") {
 tmpl_underlay_track_types_U()
}
spriteset (SUAN_JP_underlay, "grf/SUAN_JP.png") {
 tmpl_underlay_track_types_U()
}
spriteset (SUAN_overlay, "grf/SBAN.png") {
 tmpl_overlay_track_types()
}
switch(FEAT_RAILTYPES, SELF, switch_SUAN_JP,PARAM_URBANJP) {
 1: SUAN_JP_underlay;
 SUAN_underlay;
}
switch(FEAT_RAILTYPES, SELF, switch_SUAN_under_SNOW,terrain_type) {
 TILETYPE_SNOW: SBAN_snow_underlay;
 switch_SUAN_JP;
}
switch(FEAT_RAILTYPES, SELF, switch_SUAN_over_SNOW,terrain_type) {
 TILETYPE_SNOW: SBAN_snow_overlay;
 SUAN_overlay;
}
spriteset (SUAN_depot_nocc, "grf/SUAN_Depot_NoCC.png") {
 tmpl_depot(8)
}
switch(FEAT_RAILTYPES, SELF, switch_depot_SUAN_CC, PARAM_CC) {
 1: SBAN_depot;
 SUAN_depot_nocc;
}
switch(FEAT_RAILTYPES, SELF, switch_depot_SUAN_SNOW, terrain_type) {
 TILETYPE_SNOW: SAAN_depot_snow;
 switch_depot_SUAN_CC;
}
switch(FEAT_RAILTYPES, SELF, switch_depot_SUAN, PARAM_DEPOT) {
 1: CB_FAILED;
 switch_depot_SUAN_SNOW;
}
//legacy code. Lmao no wtf past me
switch(FEAT_RAILTYPES, SELF, switch_urban_tunnel, PARAM_UTUNNEL) {
 1: switch_tunnel_SSAN;
 SAAN_tunnel;
}
spriteset (ss_SUAN_tunneltracks, "grf/SSA3_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(80)
}
spriteset (ss_SUSN_tunneltracks, "grf/SSS3_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(80)
}
switch(FEAT_RAILTYPES, SELF, SUAN_tunneltracks,terrain_type) {
 TILETYPE_SNOW: ss_SUSN_tunneltracks;
 ss_SUAN_tunneltracks;
}
switch(FEAT_RAILTYPES, SELF, switch_SUAN_tunnel, PARAM_UTUNNEL) {
 1: SUAN_tunneltracks;
 SBAN_tunneltracks;
}
if(PARAM_URBAN){
item(FEAT_RAILTYPES, SUAN_ID, 5) {
     property {
         label: "SUAN";
         name: string(STR_SUAN);
         menu_text: string(STR_SUAN);
         build_window_caption: string(STR_SUAN_BUILD_CAPTION);
         autoreplace_text: string(STR_SUAN_AUTOREPLACE);
         new_engine_text: string(STR_SUAN_NEW_ENGINE);
   toolbar_caption: string(STR_SUAN_TB_CAPTION);
         compatible_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN"];
         speed_limit: (PARAM_SPEED == 0) ? 145 : (PARAM_SPEED == 1) ? 121 : 70 km/h;
   introduction_date: date((PARAM_INTRO == 0) ? 0 : (PARAM_INTRO == 1) ? 1940 : 1960,1,1);
   map_colour: 0x0B;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 8/4 : (PARAM_CONST == 1) ? 8/2 : (PARAM_CONST == 3) ? 8*2 : (PARAM_CONST == 4) ? 8*4 : 8;
   maintenance_cost: (PARAM_MAINT == 0) ? 8/4 : (PARAM_MAINT == 1) ? 8/2 : (PARAM_MAINT == 3) ? 8*2 : (PARAM_MAINT == 4) ? 8*4 : 8;
   sort_order: 0x03;
     }
     graphics {
         track_overlay: switch_SUAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_SUAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: SBAN_bridge; // defines the overlay drawn over bridges
   tunnels: switch_SUAN_tunnel; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SUAN; // defines the depot sprites
   gui: NUAN_gui; // defines the gui sprites
   tunnel_overlay: switch_urban_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_SBAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
     }
 }
 }
if(PARAM_URBAN){
item(FEAT_RAILTYPES, SUAD_ID, 14) {
     property {
         label: "SUAD";
         name: string(STR_SUAD);
         menu_text: string(STR_SUAD);
         build_window_caption: string(STR_SUAD_BUILD_CAPTION);
         autoreplace_text: string(STR_SUAD_AUTOREPLACE);
         new_engine_text: string(STR_SUAD_NEW_ENGINE);
   toolbar_caption: string(STR_SUAD_TB_CAPTION);
         compatible_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         speed_limit: (PARAM_SPEED == 0) ? 145 : (PARAM_SPEED == 1) ? 121 : 70 km/h;
   introduction_date: date((PARAM_INTRO == 0) ? 0 : (PARAM_INTRO == 1) ? 1940 : 1960,1,1);
   map_colour: 0xC3;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 12/4 : (PARAM_CONST == 1) ? 12/2 : (PARAM_CONST == 3) ? 12*2 : (PARAM_CONST == 4) ? 12*4 : 12;
   maintenance_cost: (PARAM_MAINT == 0) ? 14/4 : (PARAM_MAINT == 1) ? 14/2 : (PARAM_MAINT == 3) ? 14*2 : (PARAM_MAINT == 4) ? 14*4 : 14;
   railtype_flags: bitmask(RAILTYPE_FLAG_CATENARY);
   sort_order: 0x07;
     }
     graphics {
         track_overlay: switch_SUAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_SUAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: SBAN_bridge; // defines the overlay drawn over bridges
   tunnels: switch_SUAN_tunnel; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SUAN; // defines the depot sprites
   gui: NUAd_gui; // defines the gui sprites
   tunnel_overlay: switch_urban_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_SBAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
   catenary_wire: SBAD_wires;
   catenary_pylons: switch_pylon_SBAD;
     }
 }
 }
//Standard Gauge Branch
spriteset (NUAN_underlay, "grf/NUAN.png") {
 tmpl_underlay_track_types_U()
}
spriteset (NUAN_JP_underlay, "grf/NUAN_JP.png") {
 tmpl_underlay_track_types_U()
}
spriteset (NUAN_overlay, "grf/NBAN.png") {
 tmpl_overlay_track_types()
}
switch(FEAT_RAILTYPES, SELF, switch_NUAN_JP,PARAM_URBANJP) {
 1: NUAN_JP_underlay;
 NUAN_underlay;
}
switch(FEAT_RAILTYPES, SELF, switch_NUAN_under_SNOW,terrain_type) {
 TILETYPE_SNOW: NBAN_snow_underlay;
 switch_NUAN_JP;
}
switch(FEAT_RAILTYPES, SELF, switch_NUAN_over_SNOW,terrain_type) {
 TILETYPE_SNOW: NBAN_snow_overlay;
 NUAN_overlay;
}
spriteset (NUAN_gui, "grf/NUAN_GUI.png") {
 tmpl_gui()
}
spriteset (ss_NUAN_tunneltracks, "grf/SSA3_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(120)
}
spriteset (ss_NUSN_tunneltracks, "grf/SSS3_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(120)
}
switch(FEAT_RAILTYPES, SELF, NUAN_tunneltracks,terrain_type) {
 TILETYPE_SNOW: ss_NUSN_tunneltracks;
 ss_NUAN_tunneltracks;
}
switch(FEAT_RAILTYPES, SELF, switch_NUAN_tunnel, PARAM_UTUNNEL) {
 1: NUAN_tunneltracks;
 NBAN_tunneltracks;
}
if (PARAM_NARROW == 0 && PARAM_URBAN) {
item(FEAT_RAILTYPES, NUAN_ID, 20) {
     property {
         label: "NUAN";
         name: string(STR_NUAN);
         menu_text: string(STR_NUAN);
         build_window_caption: string(STR_NUAN_BUILD_CAPTION);
         autoreplace_text: string(STR_NUAN_AUTOREPLACE);
         new_engine_text: string(STR_NUAN_NEW_ENGINE);
   toolbar_caption: string(STR_NUAN_TB_CAPTION);
         compatible_railtype_list: ["NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN"];
         speed_limit: (PARAM_SPEED == 0) ? 145 : (PARAM_SPEED == 1) ? 121 : 70 km/h;
   introduction_date: date((PARAM_INTRO == 0) ? 0 : (PARAM_INTRO == 1) ? 1930 : 1960,1,1);
   map_colour: 0x0C;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 5/4 : (PARAM_CONST == 1) ? 5/2 : (PARAM_CONST == 3) ? 5*2 : (PARAM_CONST == 4) ? 5*4 : 5;
   maintenance_cost: (PARAM_MAINT == 0) ? 4/4 : (PARAM_MAINT == 1) ? 4/2 : (PARAM_MAINT == 3) ? 4*2 : (PARAM_MAINT == 4) ? 4*4 : 4;
   sort_order: 0x0B;
   introduces_railtype_list: ["dUAN"];
     }
     graphics {
         track_overlay: switch_NUAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_NUAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: NBAN_bridge; // defines the overlay drawn over bridges
   tunnels: switch_NUAN_tunnel; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SUAN; // defines the depot sprites
   gui: NUAN_gui; // defines the gui sprites
   tunnel_overlay: switch_urban_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_NBAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
     }
 }
 }
//Standard Gauge Branch
spriteset (NUAd_gui, "grf/NUAd_GUI.png") {
 tmpl_gui()
}
if (PARAM_NARROW == 0 && PARAM_URBAN) {
item(FEAT_RAILTYPES, NUAd_ID, 21) {
     property {
         label: "NUAd";
         name: string(STR_NUAd);
         menu_text: string(STR_NUAd);
         build_window_caption: string(STR_NUAd_BUILD_CAPTION);
         autoreplace_text: string(STR_NUAd_AUTOREPLACE);
         new_engine_text: string(STR_NUAd_NEW_ENGINE);
   toolbar_caption: string(STR_NUAd_TB_CAPTION);
         compatible_railtype_list: ["NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         speed_limit: (PARAM_SPEED == 0) ? 145 : (PARAM_SPEED == 1) ? 121 : 70 km/h;
   introduction_date: date((PARAM_INTRO == 0) ? 0 : (PARAM_INTRO == 1) ? 1940 : 1960,1,1);
   map_colour: 0x44;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 6/4 : (PARAM_CONST == 1) ? 6/2 : (PARAM_CONST == 3) ? 6*2 : (PARAM_CONST == 4) ? 6*4 : 6;
   maintenance_cost: (PARAM_MAINT == 0) ? 5/4 : (PARAM_MAINT == 1) ? 5/2 : (PARAM_MAINT == 3) ? 5*2 : (PARAM_MAINT == 4) ? 5*4 : 5;
   railtype_flags: bitmask(RAILTYPE_FLAG_CATENARY);
   sort_order: 0x0F;
   introduces_railtype_list: ["dUAd"];
         requires_railtype_list: ["NABE"];
     }
     graphics {
         track_overlay: switch_NUAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_NUAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: NBAN_bridge; // defines the overlay drawn over bridges
   tunnels: switch_NUAN_tunnel; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SUAN; // defines the depot sprites
   gui: NUAd_gui; // defines the gui sprites
   tunnel_overlay: switch_urban_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_NBAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
   catenary_wire: NBAd_wires;
   catenary_pylons: switch_pylon_SBAD;
     }
 }
 }
//Standard Gauge Branch
spriteset (dUAN_underlay, "grf/dUAN.png") {
 tmpl_underlay_track_types_U()
}
spriteset (dUAN_JP_underlay, "grf/dUAN_JP.png") {
 tmpl_underlay_track_types_U()
}
spriteset (dUAN_overlay, "grf/dBAN.png") {
 tmpl_overlay_track_types()
}
switch(FEAT_RAILTYPES, SELF, switch_dUAN_JP,PARAM_URBANJP) {
 1: dUAN_JP_underlay;
 dUAN_underlay;
}
switch(FEAT_RAILTYPES, SELF, switch_dUAN_under_SNOW,terrain_type) {
 TILETYPE_SNOW: dBAN_snow_underlay;
 switch_dUAN_JP;
}
switch(FEAT_RAILTYPES, SELF, switch_dUAN_over_SNOW,terrain_type) {
 TILETYPE_SNOW: dBAN_snow_overlay;
 dUAN_overlay;
}
spriteset (ss_dUAN_tunneltracks, "grf/SSA3_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(160)
}
spriteset (ss_dUSN_tunneltracks, "grf/SSS3_TUNNEL.png") {
 tmpl_tunnel_overlaytracks(160)
}
switch(FEAT_RAILTYPES, SELF, dUAN_tunneltracks,terrain_type) {
 TILETYPE_SNOW: ss_dUSN_tunneltracks;
 ss_dUAN_tunneltracks;
}
switch(FEAT_RAILTYPES, SELF, switch_dUAN_tunnel, PARAM_UTUNNEL) {
 1: dUAN_tunneltracks;
 dBAN_tunneltracks;
}
if (PARAM_DUAL == 1 && PARAM_NARROW == 0 && PARAM_URBAN) {
item(FEAT_RAILTYPES, dUAN_ID, 22) {
     property {
         label: "dUAN"; //first so replace
         name: string(STR_dUAN);
         menu_text: string(STR_dUAN);
         build_window_caption: string(STR_dUAN_BUILD_CAPTION);
         autoreplace_text: string(STR_dUAN_AUTOREPLACE);
         new_engine_text: string(STR_dUAN_NEW_ENGINE);
   toolbar_caption: string(STR_dUAN_TB_CAPTION);
         compatible_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN"];
         speed_limit: (PARAM_SPEED == 0) ? 145 : (PARAM_SPEED == 1) ? 121 : 70 km/h;
   //introduction_date:			 date(1970,1,1);
   map_colour: 0x0A;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 5/4 : (PARAM_CONST == 1) ? 5/2 : (PARAM_CONST == 3) ? 5*2 : (PARAM_CONST == 4) ? 5*4 : 5;
   maintenance_cost: (PARAM_MAINT == 0) ? 4/4 : (PARAM_MAINT == 1) ? 4/2 : (PARAM_MAINT == 3) ? 4*2 : (PARAM_MAINT == 4) ? 4*4 : 4;
   sort_order: 0x13;
     }
     graphics {
         track_overlay: switch_dUAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_dUAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: dBAN_bridge; // defines the overlay drawn over bridges
   tunnels: switch_dUAN_tunnel; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SUAN; // defines the depot sprites
   gui: NUAN_gui; // defines the gui sprites
   tunnel_overlay: switch_urban_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_dBAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
     }
 }
 }
//Standard Gauge Branch
if (PARAM_DUAL == 1 && PARAM_NARROW == 0 && PARAM_URBAN) {
item(FEAT_RAILTYPES, dUAd_ID, 23) {
     property {
         label: "dUAd"; //first so replace
         name: string(STR_dUAd);
         menu_text: string(STR_dUAd);
         build_window_caption: string(STR_dUAd_BUILD_CAPTION);
         autoreplace_text: string(STR_dUAd_AUTOREPLACE);
         new_engine_text: string(STR_dUAd_NEW_ENGINE);
   toolbar_caption: string(STR_dUAd_TB_CAPTION);
         compatible_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         speed_limit: (PARAM_SPEED == 0) ? 145 : (PARAM_SPEED == 1) ? 121 : 70 km/h;
   //introduction_date:			 date(1970,1,1);
   map_colour: 0x42;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 5/4 : (PARAM_CONST == 1) ? 5/2 : (PARAM_CONST == 3) ? 5*2 : (PARAM_CONST == 4) ? 5*4 : 5;
   maintenance_cost: (PARAM_MAINT == 0) ? 4/4 : (PARAM_MAINT == 1) ? 4/2 : (PARAM_MAINT == 3) ? 4*2 : (PARAM_MAINT == 4) ? 4*4 : 4;
   railtype_flags: bitmask(RAILTYPE_FLAG_CATENARY);
   sort_order: 0x17;
     }
     graphics {
         track_overlay: switch_dUAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_dUAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: dBAN_bridge; // defines the overlay drawn over bridges
   tunnels: switch_dUAN_tunnel; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SUAN; // defines the depot sprites
   gui: NUAd_gui; // defines the gui sprites
   tunnel_overlay: switch_urban_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_dBAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
   catenary_wire: NBAd_wires;
   catenary_pylons: switch_pylon_SBAD;
     }
 }
 }
//Standard Gauge Branch
spriteset (SUA3_underlay, "grf/SUA3.png") {
 tmpl_underlay_track_types()
}
spriteset (SUA3_JP_underlay, "grf/SUA3_JP.png") {
 tmpl_underlay_track_types()
}
spriteset (SUA3_overlay, "grf/SAA3.png") {
 tmpl_overlay_track_types()
}
switch(FEAT_RAILTYPES, SELF, switch_SUA3_JP,PARAM_URBANJP) {
 1: SUA3_JP_underlay;
 SUA3_underlay;
}
switch(FEAT_RAILTYPES, SELF, switch_SUA3_under_SNOW,terrain_type) {
 TILETYPE_SNOW: SAA3_snow_underlay;
 switch_SUA3_JP;
}
switch(FEAT_RAILTYPES, SELF, switch_SUA3_over_SNOW,terrain_type) {
 TILETYPE_SNOW: SAA3_snow_overlay;
 SUA3_overlay;
}
spriteset (SUA3_bridge, "grf/SAA3.png") {
 tmpl_bridges_overlay()
}
if (((PARAM_METRO == 2 || PARAM_METRO == 1) && PARAM_URBAN) || PARAM_METRO == 4) {
item(FEAT_RAILTYPES, SUA3_ID, 13) {
     property {
         label: "SUA3";//First of its kind gotta replace
         name: string(STR_SUA3);
         menu_text: string(STR_SUA3);
         build_window_caption: string(STR_SUA3_BUILD_CAPTION);
         autoreplace_text: string(STR_SUA3_AUTOREPLACE);
         new_engine_text: string(STR_SUA3_NEW_ENGINE);
   toolbar_caption: string(STR_SUA3_TB_CAPTION);
         compatible_railtype_list: ["MTRO", "SAA3", "SAB3", "SAC3", "SAD3", "SAE3", "SBA3", "SBB3", "SBC3", "SBD3", "SBE3", "SCA3", "SCB3", "SCC3", "SCD3", "SCE3", "SSA3", "SSB3", "SSC3", "SSD3", "SSE3", "SUA3", "SUB3", "SUC3", "SUD3", "SUE3"];
         powered_railtype_list: ["MTRO", "SAA3", "SAB3", "SAC3", "SAD3", "SAE3", "SBA3", "SBB3", "SBC3", "SBD3", "SBE3", "SCA3", "SCB3", "SCC3", "SCD3", "SCE3", "SSA3", "SSB3", "SSC3", "SSD3", "SSE3", "SUA3", "SUB3", "SUC3", "SUD3", "SUE3"];
   alternative_railtype_list: ["MTRO", "SAA3", "SAB3", "SAC3", "SAD3", "SAE3", "SBA3", "SBB3", "SBC3", "SBD3", "SBE3", "SCA3", "SCB3", "SCC3", "SCD3", "SCE3", "SSA3", "SSB3", "SSC3", "SSD3", "SSE3", "SUA3", "SUB3", "SUC3", "SUD3", "SUE3"];
         speed_limit: (PARAM_SPEED == 0) ? 145 : (PARAM_SPEED == 1) ? 121 : 91 km/h;
   introduction_date: date((PARAM_INTRO == 0) ? 0 : (PARAM_INTRO == 1) ? 1900 : 1965,1,1);
   map_colour: 0xC3;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 12/4 : (PARAM_CONST == 1) ? 12/2 : (PARAM_CONST == 3) ? 12*2 : (PARAM_CONST == 4) ? 12*4 : 12;
   maintenance_cost: (PARAM_MAINT == 0) ? 10/4 : (PARAM_MAINT == 1) ? 10/2 : (PARAM_MAINT == 3) ? 10*2 : (PARAM_MAINT == 4) ? 10*4 : 10;
   railtype_flags: bitmask(RAILTYPE_FLAG_NO_LEVEL_CROSSING);
   sort_order: 0x19;
     }
     graphics {
         track_overlay: switch_SUA3_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_SUA3_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: SUA3_bridge; // defines the overlay drawn over bridges
   tunnels: SSA3_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SUAN; // defines the depot sprites
   gui: SAA3_gui; // defines the gui sprites
   signals: sw_new_signals;
   tunnel_overlay: switch_urban_tunnel; // Custom Tunnel portals since v2
         fences: NO_fences; // Custom Fences since v2
     }
 }
}
//Standard Gauge Branch
spriteset (SCAN_bridge_ballast, "grf/SCAN.png") {
 tmpl_bridges_overlay()
}
spriteset (SCAN_bridge_no_ballast, "grf/SCAN_bridge.png") {
 tmpl_bridges_overlay()
}
switch(FEAT_RAILTYPES, SELF, SCAN_bridge, 2*grf_future_status("\47\47\47\35") + 2*grf_current_status("\47\47\47\35") + PARAM_BRIDGE) {
 2: SCAN_bridge_no_ballast;
 SCAN_bridge_ballast;
}
switch(FEAT_RAILTYPES, SELF, SCAN_tunneltracks,terrain_type) {
 TILETYPE_SNOW: ss_SCSN_tunneltracks;
 ss_SCAN_tunneltracks;
}
/*spriteset (SCAN_tunnel, "grf/LSM_Tunnel.png") {

	tmpl_tunnel_overlaytracks(40)

}*/
spriteset (SCAN_gui, "grf/SCAN_GUI.png") {
 tmpl_gui()
}/*

spriteset (SCAN_depot_nocc, "grf/SCAN_Depot_NoCC.png") {

	tmpl_depot(8)

}

switch(FEAT_RAILTYPES, SELF, switch_depot_SCAN_CC, PARAM_CC) {

	1: SBAN_depot;

	SCAN_depot_nocc;

}

switch(FEAT_RAILTYPES, SELF, switch_depot_SCAN_SNOW, terrain_type) {

	TILETYPE_SNOW: SBAN_depot_snow;

	switch_depot_SCAN_CC;

}

switch(FEAT_RAILTYPES, SELF, switch_depot_SCAN, PARAM_DEPOT) {

	1: CB_FAILED;

	switch_depot_SCAN_SNOW;

}



spriteset(SCAN_pylons, "grf/SCAN_PYLON.png") {

template_catenarydoublepylons()

}

/*

spriteset(SCAN_wires, "gfx/ELRL/CatenaryWires_ELRL.png") {

template_catenarywires()

}*/
item(FEAT_RAILTYPES, SCAN_ID, 24) {
     property {
         label: "SCAN";
         name: string(STR_SCAN);
         menu_text: string(STR_SCAN);
         build_window_caption: string(STR_SCAN_BUILD_CAPTION);
         autoreplace_text: string(STR_SCAN_AUTOREPLACE);
         new_engine_text: string(STR_SCAN_NEW_ENGINE);
   toolbar_caption: string(STR_SCAN_TB_CAPTION);
         compatible_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN"];
         speed_limit: (PARAM_SPEED == 0) ? 0 : (PARAM_SPEED == 1) ? 0 : 101 km/h;
   introduction_date: date((PARAM_INTRO == 0) ? 0 : (PARAM_INTRO == 1) ? 1950 : 1980,1,1);
   map_colour: 0x0B;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 18/4 : (PARAM_CONST == 1) ? 18/2 : (PARAM_CONST == 3) ? 18*2 : (PARAM_CONST == 4) ? 18*4 : 18;
   maintenance_cost: (PARAM_MAINT == 0) ? 18/4 : (PARAM_MAINT == 1) ? 18/2 : (PARAM_MAINT == 3) ? 18*2 : (PARAM_MAINT == 4) ? 18*4 : 18;
   sort_order: 0x02;
     }
     graphics {
         track_overlay: switch_SCAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_SCAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: SCAN_bridge; // defines the overlay drawn over bridges
   tunnels: SCAN_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SCAN; // defines the depot sprites
   gui: NUAN_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
         fences: NO_fences; // Custom Fences since v2
   level_crossings: sw_SCAN_crossing;
   signals: sw_new_signals;
     }
 }
//Standard Gauge Branch
spriteset (NCAN_bridge_ballast, "grf/NCAN.png") {
 tmpl_bridges_overlay()
}
spriteset (NCAN_bridge_no_ballast, "grf/NCAN_bridge.png") {
 tmpl_bridges_overlay()
}
switch(FEAT_RAILTYPES, SELF, NCAN_bridge, 2*grf_future_status("\47\47\47\35") + 2*grf_current_status("\47\47\47\35") + PARAM_BRIDGE) {
 2: NCAN_bridge_no_ballast;
 NCAN_bridge_ballast;
}
switch(FEAT_RAILTYPES, SELF, NCAN_tunneltracks,terrain_type) {
 TILETYPE_SNOW: ss_NCSN_tunneltracks;
 ss_NCAN_tunneltracks;
}/*

spriteset (NCAN_tunnel, "grf/LSM_Tunnel.png") {

	tmpl_tunnel_overlaytracks(40)

}*/
spriteset (NCAN_gui, "grf/NCAN_GUI.png") {
 tmpl_gui()
}/*

spriteset (NCAN_depot, "grf/NCAN_Depot.png") {

	tmpl_depot(8)

}

spriteset (NCAN_depot_nocc, "grf/NCAN_Depot_NOCC.png") {

	tmpl_depot(8)

}*/
spriteset(NCAN_pylons, "grf/NBAd_PYLON.png") {
template_catenarydoublepylons()
}
spriteset(NCAN_wires, "grf/SBAD_WIRE.png") {
template_catenarywires()
}
if (PARAM_NARROW == 0) {
item(FEAT_RAILTYPES, NCAN_ID, 25) {
     property {
         label: "NCAN";
         name: string(STR_NCAN);
         menu_text: string(STR_NCAN);
         build_window_caption: string(STR_NCAN_BUILD_CAPTION);
         autoreplace_text: string(STR_NCAN_AUTOREPLACE);
         new_engine_text: string(STR_NCAN_NEW_ENGINE);
   toolbar_caption: string(STR_NCAN_TB_CAPTION);
         compatible_railtype_list: ["NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN"];
         speed_limit: (PARAM_SPEED == 0) ? (PARAM_SPEED == 1) ? 0 : 0 : 101 km/h;
   introduction_date: date((PARAM_INTRO == 0) ? 0 : (PARAM_INTRO == 1) ? 1950 : 1980,1,1);
   map_colour: 0x0C;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 7/4 : (PARAM_CONST == 1) ? 7/2 : (PARAM_CONST == 3) ? 7*2 : (PARAM_CONST == 4) ? 7*4 : 7;
   maintenance_cost: (PARAM_MAINT == 0) ? 6/4 : (PARAM_MAINT == 1) ? 6/2 : (PARAM_MAINT == 3) ? 6*2 : (PARAM_MAINT == 4) ? 6*4 : 6;
   sort_order: 0x0A;
   introduces_railtype_list: ["dCAN"];
     }
     graphics {
         track_overlay: switch_NCAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_NCAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: NCAN_bridge; // defines the overlay drawn over bridges
   tunnels: NCAN_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SCAN; // defines the depot sprites
   gui: NUAN_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_NCAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
     }
 }
 }
//Standard Gauge Branch
spriteset (dCAN_bridge_ballast, "grf/dCAN.png") {
 tmpl_bridges_overlay()
}
spriteset (dCAN_bridge_no_ballast, "grf/dCAN_bridge.png") {
 tmpl_bridges_overlay()
}
switch(FEAT_RAILTYPES, SELF, dCAN_bridge, 2*grf_future_status("\47\47\47\35") + 2*grf_current_status("\47\47\47\35") + PARAM_BRIDGE) {
 2: dCAN_bridge_no_ballast;
 dCAN_bridge_ballast;
}
switch(FEAT_RAILTYPES, SELF, dCAN_tunneltracks,terrain_type) {
 TILETYPE_SNOW: ss_dCSN_tunneltracks;
 ss_dCAN_tunneltracks;
}/*

spriteset (NBAd_tunnel, "grf/LSM_Tunnel.png") {

	tmpl_tunnel_overlaytracks(40)

}*/
/*

spriteset (NBAd_depot, "grf/NBAd_Depot.png") {

	tmpl_depot(8)

}

spriteset (NBAd_depot_nocc, "grf/NBAd_Depot_NOCC.png") {

	tmpl_depot(8)

}*/
if (PARAM_DUAL == 1 && PARAM_NARROW == 0) {
item(FEAT_RAILTYPES, dCAN_ID, 26) {
     property {
         label: "dCAN"; //first so replace
         name: string(STR_dCAN);
         menu_text: string(STR_dCAN);
         build_window_caption: string(STR_dCAN_BUILD_CAPTION);
         autoreplace_text: string(STR_dCAN_AUTOREPLACE);
         new_engine_text: string(STR_dCAN_NEW_ENGINE);
   toolbar_caption: string(STR_dCAN_TB_CAPTION);
         compatible_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
         powered_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "ELRL", "SAAE", "SABE", "SACE", "SADE", "SAEE", "SBAE", "SBBE", "SBCE", "SBDE", "SBEE", "SCAE", "SCBE", "SCCE", "SCDE", "SCEE", "SUAE", "SUBE", "SUUE", "SUDE", "SUEE", "SAAD", "SABD", "SACD", "SADD", "SAED", "SBAD", "SBBD", "SBCD", "SBDD", "SBED", "SCAD", "SCBD", "SCCD", "SCDD", "SCED", "SUAD", "SUBD", "SUUD", "SUDD", "SUED", "NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "NAAE", "NABE", "NACE", "NADE", "NAEE", "NAKE", "NBAE", "NBBE", "NBCE", "NBDE", "NBEE", "NBKE", "NCAE", "NCBE", "NCCE", "NCDE", "NCEE", "NCKE", "NUAE", "NUBE", "NUUE", "NUDE", "NUEE", "NAAd", "NABd", "NACd", "NAdd", "NAEd", "NAKd", "NBAd", "NBBd", "NBCd", "NBdd", "NBEd", "NBKd", "NCAd", "NCBd", "NCCd", "NCdd", "NCEd", "NCKd", "NUAd", "NUBd", "NUUd", "NUdd", "NUEd", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN", "dAAE", "dABE", "dACE", "dADE", "dAEE", "dBAE", "dBBE", "dBCE", "dBDE", "dBEE", "dCAE", "dCBE", "dCCE", "dCDE", "dCEE", "dUAE", "dUBE", "dUUE", "dUDE", "dUEE", "dAAD", "dABD", "dACD", "dADD", "dAED", "dBAD", "dBBD", "dBCD", "dBDD", "dBED", "dCAD", "dCBD", "dCCD", "dCDD", "dCED", "dUAD", "dUBD", "dUUD", "dUDD", "dUED", "dAAd", "dABd", "dACd", "dADd", "dAEd", "dBAd", "dBBd", "dBCd", "dBDd", "dBEd", "dCAd", "dCBd", "dCCd", "dCDd", "dCEd", "dUAd", "dUBd", "dUUd", "dUDd", "dUEd"];
   alternative_railtype_list: ["RAIL", "SAAN", "SABN", "SACN", "SADN", "SAEN", "SBAN", "SBBN", "SBCN", "SBDN", "SBEN", "SCAN", "SCBN", "SCCN", "SCDN", "SCEN", "SUAN", "SUBN", "SUUN", "SUDN", "SUEN", "NAAN", "NABN", "NACN", "NADN", "NAEN", "NAKN", "NBAN", "NBBN", "NBCN", "NBDN", "NBEN", "NBKN", "NCAN", "NCBN", "NCCN", "NCDN", "NCEN", "NCKN", "NUAN", "NUBN", "NUUN", "NUDN", "NUEN", "dAAN", "dABN", "dACN", "dADN", "dAEN", "dBAN", "dBBN", "dBCN", "dBDN", "dBEN", "dCAN", "dCBN", "dCCN", "dCDN", "dCEN", "dUAN", "dUBN", "dUUN", "dUDN", "dUEN"];
         speed_limit: (PARAM_SPEED == 0) ? 0 : (PARAM_SPEED == 1) ? 0 : 101 km/h;
   //introduction_date:			 date(1970,1,1);
   map_colour: 0x0A;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: (PARAM_CONST == 0) ? 19/4 : (PARAM_CONST == 1) ? 19/2 : (PARAM_CONST == 3) ? 19*2 : (PARAM_CONST == 4) ? 19*4 : 19;
   maintenance_cost: (PARAM_MAINT == 0) ? 19/4 : (PARAM_MAINT == 1) ? 19/2 : (PARAM_MAINT == 3) ? 19*2 : (PARAM_MAINT == 4) ? 19*4 : 19;
   sort_order: 0x12;
     }
     graphics {
         track_overlay: switch_dCAN_over_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: switch_dCAN_under_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: dCAN_bridge; // defines the overlay drawn over bridges
   tunnels: dCAN_tunneltracks; // defines the tracks drawn on a funnel tile
         depots: switch_depot_SCAN; // defines the depot sprites
   gui: NUAN_gui; // defines the gui sprites
   tunnel_overlay: SAAN_tunnel; // Custom Tunnel portals since v2
   level_crossings: sw_dCAN_crossing;
   signals: sw_new_signals;
         fences: NO_fences; // Custom Fences since v2
     }
 }
}
//cd /mnt/c/Temp/MTS2
